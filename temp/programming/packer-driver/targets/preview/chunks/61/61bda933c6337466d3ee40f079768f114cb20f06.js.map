{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Game/Skill/SkillTypeItem.ts"],"names":["_decorator","Sprite","UITransform","BaseComponent","ReleaseSkillObj","SkillData","MonsterData","HeroData","GameDefine","Constants","ResourcesUtil","ccclass","property","SkillTypeItem","_skillCfg","_cd","_initRelease","_weaponKey","range","Range","init","weaponKey","weaponCfg","instance","getSkillCfgById","SkillId","Cd","setSkillTypeInfo","skillCfg","path","weaponIconPath","Res","qualityPath","Quality","geSpriteFrame","then","data","quality","spriteFrame","skilIcon","contentSize","getComponent","scale","Math","min","width","height","node","setScale","initSkillCd","setSkillProgressBar","cd","progress","getChildByName","fillRange","createQueueSkill","releaseSkillObj","callback","bind","skillKey","addQueueSkill","childUpdate","dt","gameStart","skillPos","heroPoint","checkSkillNearMonster","setNearMonster"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec3, Sprite, SpriteFrame, UITransform } from 'cc';\r\nimport BaseComponent from '../../Frame/BaseComponent';\r\nimport { SkillCfg } from '../../Model/SkillModel';\r\nimport { ReleaseSkillObj, SkillBulletObj, SkillData } from '../Data/SkillData';\r\nimport { MonsterData } from '../Data/MonsterData';\r\nimport { HeroData } from '../Data/HeroData';\r\nimport { GameDefine } from '../../GameDefine';\r\nimport { WeaponCfg } from '../../Model/WeaponModel';\r\nimport { Constants } from '../../Constants';\r\nimport { ResourcesUtil } from '../../Frame/ResourcesUtil';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('SkillTypeItem')\r\nexport class SkillTypeItem extends BaseComponent {\r\n    @property(Sprite)\r\n    quality: Sprite = null;\r\n    @property(Sprite)\r\n    skilIcon: Sprite = null;\r\n    private _skillCfg: SkillCfg = null;\r\n    private _cd: number = 0; //技能cd\r\n    private _initRelease: boolean = true;//技能释放\r\n    private _weaponKey: string = '';\r\n\r\n    public get range() {\r\n        return this._skillCfg.Range;\r\n    }\r\n\r\n    init(weaponKey: string, weaponCfg: WeaponCfg) {\r\n        this._weaponKey = weaponKey;\r\n        this._skillCfg = SkillData.instance.getSkillCfgById(weaponCfg.SkillId);\r\n        this._cd = this._skillCfg.Cd;\r\n        this.setSkillTypeInfo(this._skillCfg);\r\n    }\r\n\r\n    setSkillTypeInfo(skillCfg: SkillCfg) {\r\n        let path = Constants.weaponIconPath + skillCfg.Res + '/spriteFrame';\r\n        let qualityPath = Constants.qualityPath + skillCfg.Quality + '/spriteFrame';\r\n        ResourcesUtil.geSpriteFrame(qualityPath).then((data: SpriteFrame) => {\r\n            this.quality.spriteFrame = data;\r\n        })\r\n        ResourcesUtil.geSpriteFrame(path).then((data: SpriteFrame) => {\r\n            this.skilIcon.spriteFrame = data;\r\n            let contentSize = this.skilIcon.getComponent(UITransform).contentSize;\r\n            let scale = Math.min(80 / contentSize.width, 80 / contentSize.height);\r\n            this.skilIcon.node.setScale(scale, scale);\r\n            this._initRelease = true;\r\n        })\r\n    }\r\n\r\n    initSkillCd() {\r\n        this._cd = this._skillCfg.Cd;\r\n        this._initRelease = true;\r\n    }\r\n\r\n    setSkillProgressBar(cd: number) {\r\n        let progress = cd / this._skillCfg.Cd;\r\n        this.node.getChildByName('bar').getComponent(Sprite).fillRange = progress;\r\n    }\r\n\r\n\r\n    /* 创建队列技能 */\r\n    createQueueSkill() {\r\n        let releaseSkillObj = new ReleaseSkillObj();\r\n        releaseSkillObj.skillCfg = this._skillCfg;\r\n        releaseSkillObj.callback = this.initSkillCd.bind(this);\r\n        releaseSkillObj.skillKey = this._weaponKey;\r\n        HeroData.instance.addQueueSkill(releaseSkillObj);\r\n    }\r\n\r\n    protected childUpdate(dt: number): void {\r\n        if (GameDefine.gameStart) {\r\n            let skillPos = HeroData.instance.heroPoint;\r\n            if (this._initRelease) {\r\n                this._cd -= dt;\r\n                this.setSkillProgressBar(this._cd);\r\n                /* 检测技能范围内的怪物 */\r\n                if (this._cd < 0) {\r\n                    //释放技能\r\n                    if (MonsterData.instance.checkSkillNearMonster(skillPos, this._skillCfg.Range)) {\r\n                        this._initRelease = false;\r\n                        this.createQueueSkill();\r\n                    }\r\n                    else {\r\n                        this._cd = this._skillCfg.Cd;\r\n                    }\r\n                }\r\n                MonsterData.instance.setNearMonster(this._weaponKey, skillPos, this._skillCfg.Range);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}