{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Game/Monster/MonsterBase.ts"],"names":["MoveEffect","_decorator","Animation","AnimationComponent","CircleCollider2D","color","Color","Sprite","tween","UITransform","v3","Vec2","Vec3","BaseComponent","PoolManager","EventListener","GameEvent","MonsterEvent","MonsterAmin","MonsterType","MonsterData","HeroData","GameDefine","ccclass","property","MonsterBase","monsterHpItem","monsterShadow","initStatus","monsterCfg","monsterObj","moveSpeed","monsterId","monsterHp","curHp","atk","atkTime","dir","scale","isMove","curAnim","curPos","colliderPos","boundBox","monsterKey","isDie","isCollider","isHurt","isRepulse","_moveEffect","_showHitTotalTime","setMonsterBorn","instance","getMonsterSpeed","Speed","Id","getMonsterHp","Hp","Number","HpUp","getMonsterAtk","mType","comObj","monsterAnim","getComponent","setMonsterSize","monterName","BOSS","Math","random","toString","substring","setMonsterBoundBox","addMonsterNodeByKey","emit","SHOW_MONSTER_HP","SHOW_MONSTER_SHADOW","node","getPosition","IconScale","setScale","setMonsterAnim","anim","loop","play","setMonsterAnimEvent","on","EventType","FINISHED","data","attackHero","Move","HERO_HURT","getColliderPos","pos","clone","offset","x","y","radius","ColliderRadius","offsetArr","ColliderOffset","split","getBoundBoxCircle","circleR","monsterMoveFrame","dt","nodePos","dis","multiply","temPos","add","setPosition","checkInHeroRange","Atk","Interval","insertRectCircleObj","INSERT_QUARD_TREE_RECT_CIRCLE","onAttacked","attack","type","skillBulletObj","attacked","ceil","setMonsterHp","CREATE_DAMAGER_NUM","clear","MONSTER_DIE","playHit","tmpColor","to","onUpdate","target","ratio","call","start","setMonsterHurtEffect","time","fromHEX","scheduleOnce","setMonsterHurtMoveEffect","move","intensity_up","length","moveArr","speed","moveEffect","vector","subtract","normalize","moveRepulseEffectFrame","viewHeight","height","abs","viewWidth","width","setBossDie","checkColliderCount","updateSkillDamageInterval","SHOW_MONSTER_DIE_EFFECT","killNum","DELETE_QUARD_TREE_OBJ","deleteNearMonster","putNodeByKey","deleteMonsterNodeByKey","childUpdate"],"mappings":"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","sourcesContent":["import { _decorator, Animation, AnimationComponent, BoxCollider2D, CircleCollider2D, color, Color, Component, log, math, Node, Rect, sp, Sprite, Tween, tween, UITransform, v2, v3, Vec2, Vec3 } from 'cc';\r\nimport BaseComponent from '../../Frame/BaseComponent';\r\nimport { PoolManager } from '../../Frame/PoolManager';\r\nimport { EventListener } from '../../Frame/EventListener';\r\nimport { GameEvent } from '../Event/GameEvent';\r\nimport { MonsterEvent } from './Event/MonsterEvent';\r\nimport { MonsterAmin, MonsterCfg } from '../../Model/MonsterModel';\r\nimport { MonsterType } from '../../Model/ChapterEventModel';\r\nimport { SkillBulletObj } from '../Data/SkillData';\r\nimport { MonsterData, MonsterObj } from '../Data/MonsterData';\r\nimport { HeroData } from '../Data/HeroData';\r\nimport { MonsterHpItem } from '../Battle/MonsterHpItem';\r\nimport { GameDefine } from '../../GameDefine';\r\nimport { Shadow } from '../Battle/Shadow';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MonsterBase')\r\nexport class MonsterBase extends BaseComponent {\r\n    @property(AnimationComponent)\r\n    monsterAnim: AnimationComponent = null;\r\n\r\n    public monsterHpItem: MonsterHpItem = null;//怪物血量\r\n    public monsterShadow: Shadow = null;//怪物阴影\r\n\r\n    public initStatus: boolean = false; //怪物初始化\r\n    public monsterCfg: MonsterCfg = null;//怪物配置\r\n    public monsterObj: MonsterObj = null;//怪物对象\r\n    public moveSpeed: number = 80;//怪物移动速度\r\n    public monsterId: number = 101;//怪物id\r\n    public monsterHp: number = 10;//怪物血量\r\n    public curHp: number = 10;//怪物当前血量\r\n    public atk: number = 5;//怪物攻击\r\n    public atkTime: number = 0;//攻击间隔时间\r\n    public dir: Vec3 = v3(0, -1, 0);//怪物移动方向\r\n    public scale: number = 1;//整体比例缩放大小\r\n    public isMove: boolean = true;//是否移动\r\n    public curAnim: string = ''; //当前动画\r\n    public curPos: Vec3 = new Vec3();//怪物当前基点坐标\r\n    public colliderPos: Vec3 = new Vec3();//怪物碰撞中心坐标\r\n    public boundBox: CircleCollider2D = null;//包围盒\r\n    public monsterKey: string = '';\r\n    public isDie: boolean = false;//是否死亡\r\n    public isCollider: boolean;//是否碰撞\r\n    public isHurt: boolean = false;//是否受伤\r\n    public isRepulse: boolean = false;//是否击退\r\n    private _moveEffect: MoveEffect = null;//击退效果\r\n\r\n    setMonsterBorn() {\r\n        this.moveSpeed = MonsterData.instance.getMonsterSpeed(this.monsterCfg.Speed);\r\n        this.monsterId = this.monsterCfg.Id;\r\n        this.monsterHp = MonsterData.instance.getMonsterHp(this.monsterCfg.Hp * Number(this.monsterObj.HpUp));\r\n        this.curHp = this.monsterHp;\r\n        this.atk = MonsterData.instance.getMonsterAtk(this.monsterCfg.mType);\r\n        this.dir = v3(0, -1, 0);\r\n        this.isMove = true;\r\n        this.atkTime = 0;\r\n        let comObj = this.monsterAnim.getComponent(Sprite);\r\n        comObj.color = new Color(255, 255, 255);\r\n        this.setMonsterSize();\r\n        let monterName = this.monsterCfg.mType == MonsterType.BOSS ? 'boss' : 'monster';\r\n        this.monsterKey = monterName + this.monsterId + Math.random().toString().substring(2, 6) + Math.random().toString().substring(2, 12);\r\n        this.setMonsterBoundBox();\r\n        MonsterData.instance.addMonsterNodeByKey(this);\r\n        this.isDie = false;\r\n        this.isHurt = false;\r\n        this.isRepulse = false;\r\n        EventListener.emit(GameEvent.SHOW_MONSTER_HP, this);\r\n        EventListener.emit(GameEvent.SHOW_MONSTER_SHADOW, this);\r\n        this.curPos = this.node.getPosition();\r\n        this.initStatus = true;\r\n    }\r\n\r\n    /* 设置怪物大小 */\r\n    setMonsterSize() {\r\n        this.scale = this.monsterCfg.IconScale;\r\n        this.node.setScale(v3(this.scale, this.scale, this.scale))\r\n    }\r\n\r\n    setMonsterAnim(anim: string, loop: boolean = true) {\r\n        if (this.curAnim != anim) {\r\n            if (this.monsterCfg) {\r\n                this.monsterAnim.play(anim);\r\n                this.curAnim = anim;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* 设置动画监听 */\r\n    setMonsterAnimEvent() {\r\n        this.monsterAnim.on(Animation.EventType.FINISHED, (data) => {\r\n            this.attackHero(this.atk);\r\n            this.setMonsterAnim(MonsterAmin.Move);\r\n        })\r\n    }\r\n\r\n    /**\r\n   * 攻击英雄\r\n   * @param atk \r\n   */\r\n    attackHero(atk: number) {\r\n        // console.log('英雄受伤', atk);\r\n        EventListener.emit(GameEvent.HERO_HURT, atk);\r\n    }\r\n\r\n    /**\r\n     * 获取碰撞点坐标\r\n     * @returns \r\n     */\r\n    getColliderPos() {\r\n        let pos = this.curPos.clone();\r\n        let offset = this.boundBox.offset;\r\n        pos.x += offset.x;\r\n        pos.y += offset.y;\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * 设置怪物包围盒\r\n     */\r\n    setMonsterBoundBox() {\r\n        this.boundBox = this.node.getComponent(CircleCollider2D);\r\n        this.boundBox.radius = this.monsterCfg.ColliderRadius;\r\n        let offsetArr = this.monsterCfg.ColliderOffset ? this.monsterCfg.ColliderOffset.split('|') : ['0', '0'];\r\n        this.boundBox.offset = new Vec2(Number(offsetArr[0]), Number(offsetArr[1]));\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒半径\r\n     * @returns \r\n     */\r\n    getBoundBoxCircle() {\r\n        let circleR = this.boundBox instanceof CircleCollider2D ? this.boundBox.radius : 20;\r\n        return circleR;\r\n    }\r\n\r\n    /**\r\n     * 怪物移动\r\n     * @param dt \r\n     */\r\n    monsterMoveFrame(dt: number) {\r\n        if (!this.isRepulse) {\r\n            if (this.isMove) {\r\n                this.setMonsterAnim(MonsterAmin.Move);\r\n                let nodePos = this.node.getPosition();\r\n                let dir = this.dir.clone();\r\n                let dis = dir.multiply(v3(this.moveSpeed * dt, this.moveSpeed * dt, 0));\r\n                let temPos = nodePos.add(dis);\r\n                this.node.setPosition(temPos);\r\n                this.curPos = temPos;\r\n                //检测英雄\r\n                //检测进入英雄范围内\r\n                this.isMove = HeroData.instance.checkInHeroRange(new Vec2(temPos.x, temPos.y), this);\r\n            }\r\n            else {\r\n                //攻击\r\n                this.atkTime -= dt;\r\n                if (this.atkTime <= 0) {\r\n                    //攻击动作\r\n                    this.setMonsterAnim(MonsterAmin.Atk, false);\r\n                    this.atkTime = this.monsterCfg.Interval;\r\n                    //动画完成监听\r\n                    this.setMonsterAnimEvent();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加方形区域检测对象\r\n     * @param dt \r\n     */\r\n    insertRectCircleObj(dt: number) {\r\n        if (this.initStatus) {\r\n            EventListener.emit(GameEvent.INSERT_QUARD_TREE_RECT_CIRCLE, this.monsterKey, this, this.boundBox);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 怪物受伤\r\n     */\r\n    onAttacked(attack: number, type: number = 0, skillBulletObj: SkillBulletObj = null) {\r\n        if (attack > 0 && !this.isDie) {\r\n            let attacked = Math.ceil(attack);\r\n            this.curHp -= attacked;\r\n            //血条进度\r\n            this.monsterHpItem && this.monsterHpItem.setMonsterHp(this.curHp, this.monsterHp);\r\n            EventListener.emit(GameEvent.CREATE_DAMAGER_NUM, this.getColliderPos(), attacked, type);\r\n            if (this.curHp <= 0) {\r\n                this.curHp = 0;\r\n                this.isDie = true;\r\n                //获得经验值\r\n                this.clear();\r\n                EventListener.emit(MonsterEvent.MONSTER_DIE, this.curPos);\r\n            }\r\n            else {\r\n                //受击效果\r\n                // this.setMonsterHurtEffect();\r\n                this.playHit();\r\n            }\r\n        }\r\n    }\r\n\r\n    _showHitTotalTime: number = 0.15\r\n    playHit() {\r\n        //占用alpha通道\r\n        let comObj = this.monsterAnim.getComponent(Sprite);\r\n        comObj.color = color(255, 255, 255, 1)\r\n        let tmpColor: math.Color = color(255, 255, 255, 50)\r\n        tween(comObj).to(this._showHitTotalTime, {}, {\r\n            onUpdate(target: Sprite, ratio) {\r\n                tmpColor = color(255, 255, 255, 50 * ratio)\r\n                target.color = tmpColor\r\n            },\r\n        }).call(() => {\r\n            tmpColor = color(255, 255, 255, 255)\r\n            comObj.color = tmpColor\r\n        }).start()\r\n\r\n    }\r\n\r\n    /* 设置怪物受伤状态 */\r\n    setMonsterHurtEffect(time = 0.3) {\r\n        if (!this.isDie && !this.isHurt) {\r\n            this.isHurt = true;\r\n            let comObj = this.monsterAnim.getComponent(Sprite);\r\n            comObj.color = new Color().fromHEX('FF4B4B');;\r\n            this.scheduleOnce(() => {\r\n                this.isHurt = false;\r\n                comObj.color = new Color(255, 255, 255);\r\n            }, time);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置怪物首次受伤击退效果\r\n     */\r\n    setMonsterHurtMoveEffect(move: Array<Array<string>>, intensity_up: number, dir: Vec3, pos: Vec3) {\r\n        if (move.length) {\r\n            let moveArr = move[0]\r\n            let type = Number(moveArr[0]);\r\n            let speed = Number(moveArr[1]) + intensity_up;\r\n            let time = Number(moveArr[2]);\r\n            let moveEffect = new MoveEffect();\r\n            moveEffect.speed = speed;\r\n            moveEffect.time = time;\r\n            switch (type) {\r\n                case 1:\r\n                    //牵引\r\n                    moveEffect.dir = dir;\r\n                    break;\r\n                case 2:\r\n                    //圆心范围内击退\r\n                    let vector = new Vec3();\r\n                    Vec3.subtract(vector, this.getColliderPos(), pos);\r\n                    moveEffect.dir = vector.normalize();\r\n                    break;\r\n                case 3:\r\n                    //击退\r\n                    moveEffect.dir = dir;\r\n                    break;\r\n            }\r\n            this._moveEffect = moveEffect;\r\n            this.isRepulse = true;\r\n        }\r\n    }\r\n    /**\r\n     * 移动击退效果\r\n     */\r\n    moveRepulseEffectFrame(dt: number) {\r\n        if (this.isRepulse) {\r\n            if (this._moveEffect) {\r\n                this._moveEffect.time -= dt;\r\n                if (this._moveEffect.time <= 0) {\r\n                    this.isRepulse = false;\r\n                    this._moveEffect = null;\r\n                }\r\n                else {\r\n                    let nodePos = this.node.getPosition();\r\n                    if (nodePos.y > GameDefine.viewHeight / 2 + this.monsterAnim.node.getComponent(UITransform).height / 2) {\r\n                        this.isRepulse = false;\r\n                        this._moveEffect = null;\r\n                        return;\r\n                    };\r\n                    let dir = this._moveEffect.dir;\r\n                    let speed = this._moveEffect.speed;\r\n                    let dis = dir.multiply(v3(speed * dt, speed * dt, 0));\r\n                    let temPos = nodePos.add(dis);\r\n                    //是否出边界\r\n                    if (Math.abs(temPos.x) > GameDefine.viewWidth / 2 - this.monsterAnim.node.getComponent(UITransform).width / 2) {\r\n                        let dir = new Vec3(0, 1, 0);\r\n                        dis = dir.multiply(v3(speed * dt, speed * dt, 0));\r\n                        temPos = nodePos.add(dis);\r\n                    }\r\n                    this.node.setPosition(temPos);\r\n                    this.curPos = temPos;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* 设置boss死亡 */\r\n    setBossDie() {\r\n        // Debug.log('boss死亡完成');\r\n        EventListener.emit(MonsterEvent.MONSTER_DIE, this.curPos);\r\n        this.clear();\r\n    }\r\n\r\n    /* 检测碰撞次数 */\r\n    checkColliderCount() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 更新间隔伤害时间\r\n     */\r\n    updateSkillDamageInterval() {\r\n\r\n    }\r\n\r\n    clear() {\r\n        EventListener.emit(GameEvent.SHOW_MONSTER_DIE_EFFECT, this.node.getPosition());\r\n        //移除怪物\r\n        this.monsterShadow && this.monsterShadow.clear();\r\n        //移除怪物\r\n        this.initStatus = false;\r\n        this.monsterCfg = null;\r\n        this.monsterObj = null;\r\n        this.monsterHpItem = null;\r\n        this.monsterShadow = null;\r\n        this.isDie = false;\r\n        this.isMove = true;\r\n        this.isHurt = false;\r\n        this.isRepulse = false;\r\n        MonsterData.instance.killNum = 1;\r\n        EventListener.emit(GameEvent.DELETE_QUARD_TREE_OBJ, this.monsterKey);\r\n        MonsterData.instance.deleteNearMonster(this.monsterKey);\r\n        PoolManager.instance.putNodeByKey(this.node, this.monsterId.toString());\r\n        MonsterData.instance.deleteMonsterNodeByKey(this.monsterKey);\r\n    }\r\n\r\n    childUpdate(dt: number) {\r\n\r\n    }\r\n}\r\n\r\nexport class MoveEffect {\r\n    speed: number;\r\n    time: number;\r\n    dir: Vec3;\r\n}\r\n\r\n\r\n"]}