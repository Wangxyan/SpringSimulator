{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Frame/EventListener.ts"],"names":["EventListener","on","eventName","cb","target","handle","data","func","push","off","list","length","i","event","splice","emit","curLen","args","apply","offset","clear"],"mappings":";;;iBAQaA,a;;;;;;;;;;;;;+BAAAA,a,GAAN,MAAMA,aAAN,CAAoB;AAGP,eAAFC,EAAE,CAACC,SAAD,EAAoBC,EAApB,EAAkCC,MAAlC,EAAgD;AAC5D,cAAI,CAAC,KAAKC,MAAL,CAAYH,SAAZ,CAAL,EAA6B;AACzB,iBAAKG,MAAL,CAAYH,SAAZ,IAAyB,EAAzB;AACH;;AAED,cAAMI,IAAgB,GAAG;AAAEC,YAAAA,IAAI,EAAEJ,EAAR;AAAYC,YAAAA;AAAZ,WAAzB;AACA,eAAKC,MAAL,CAAYH,SAAZ,EAAuBM,IAAvB,CAA4BF,IAA5B;AACH;;AAEgB,eAAHG,GAAG,CAACP,SAAD,EAAoBC,EAApB,EAAkCC,MAAlC,EAAgD;AAC7D,cAAMM,IAAI,GAAG,KAAKL,MAAL,CAAYH,SAAZ,CAAb;;AACA,cAAI,CAACQ,IAAD,IAASA,IAAI,CAACC,MAAL,IAAe,CAA5B,EAA+B;AAC3B;AACH;;AAED,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACC,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AAClC,gBAAMC,KAAK,GAAGH,IAAI,CAACE,CAAD,CAAlB;;AACA,gBAAIC,KAAK,CAACN,IAAN,KAAeJ,EAAf,KAAsB,CAACC,MAAD,IAAWA,MAAM,KAAKS,KAAK,CAACT,MAAlD,CAAJ,EAA+D;AAC3DM,cAAAA,IAAI,CAACI,MAAL,CAAYF,CAAZ,EAAe,CAAf;AACA;AACH;AACJ;AACJ;;AAEiB,eAAJG,IAAI,CAACb,SAAD,EAAkC;AAChD,cAAMQ,IAAI,GAAG,KAAKL,MAAL,CAAYH,SAAZ,CAAb;;AACA,cAAI,CAACQ,IAAD,IAASA,IAAI,CAACC,MAAL,IAAe,CAA5B,EAA+B;AAC3B;AACH;;AAED,cAAIK,MAAM,GAAGN,IAAI,CAACC,MAAlB;;AANgD,4CAAXM,IAAW;AAAXA,YAAAA,IAAW;AAAA;;AAOhD,eAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACC,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AAClC,gBAAMC,KAAK,GAAGH,IAAI,CAACE,CAAD,CAAlB;;AACA,gBAAIC,KAAJ,EAAW;AACPA,cAAAA,KAAK,CAACN,IAAN,CAAWW,KAAX,CAAiBL,KAAK,CAACT,MAAvB,EAA+Ba,IAA/B;AACA,kBAAIE,MAAM,GAAG,CAAb;;AACA,kBAAIH,MAAM,GAAGN,IAAI,CAACC,MAAlB,EAA0B;AACtBQ,gBAAAA,MAAM,GAAGH,MAAM,GAAGN,IAAI,CAACC,MAAvB;AACAC,gBAAAA,CAAC,IAAIO,MAAL;AACAH,gBAAAA,MAAM,GAAGN,IAAI,CAACC,MAAd;AACH;AACJ;AACJ;AACJ;;AAEkB,eAALS,KAAK,GAAG;AAClB,eAAKf,MAAL,GAAc,EAAd;AACH;;AAlDsB,O;;AAAdL,MAAAA,a,CACKK,M,GAAiB,E","sourcesContent":["interface IEventData {\r\n    func: Function;\r\n    target: any;\r\n}\r\n\r\ninterface IEvent {\r\n    [eventName: string]: IEventData[];\r\n}\r\nexport class EventListener {\r\n    public static handle: IEvent = {};\r\n\r\n    public static on(eventName: string, cb: Function, target?: any) {\r\n        if (!this.handle[eventName]) {\r\n            this.handle[eventName] = [];\r\n        }\r\n\r\n        const data: IEventData = { func: cb, target };\r\n        this.handle[eventName].push(data);\r\n    }\r\n\r\n    public static off(eventName: string, cb: Function, target?: any) {\r\n        const list = this.handle[eventName];\r\n        if (!list || list.length <= 0) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < list.length; i++) {\r\n            const event = list[i];\r\n            if (event.func === cb && (!target || target === event.target)) {\r\n                list.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static emit(eventName: string, ...args: any) {\r\n        const list = this.handle[eventName];\r\n        if (!list || list.length <= 0) {\r\n            return;\r\n        }\r\n\r\n        let curLen = list.length;\r\n        for (let i = 0; i < list.length; i++) {\r\n            const event = list[i];\r\n            if (event) {\r\n                event.func.apply(event.target, args);\r\n                let offset = 0;\r\n                if (curLen > list.length) {\r\n                    offset = curLen - list.length;\r\n                    i -= offset;\r\n                    curLen = list.length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static clear() {\r\n        this.handle = {};\r\n    }\r\n}\r\n\r\n"]}