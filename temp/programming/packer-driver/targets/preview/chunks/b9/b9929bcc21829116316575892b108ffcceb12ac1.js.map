{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Game/Mgr/MonsterManager.ts"],"names":["_decorator","AnimationComponent","instantiate","Node","Vec3","Sprite","PoolManager","MonsterItem","ResourcesUtil","EventListener","MonsterEvent","BaseComponent","GameEvent","MonsterType","MonsterAmin","MonsterData","MonsterEventObj","MonsterObj","Constants","GameDefine","OpenPopupManager","ccclass","property","MonsterManager","_monsterPrefabMap","Map","_gameTime","_brushMonsterEventArr","_queeuMonsterArr","_curChapterEvent","_curTotalNum","_curKillNum","_screenMonsterCount","_schduleTime","init","instance","setCurChapterEvent","brushMonsterEventData","length","shift","wave","Wave","setBrushMonsterEvent","eType","eventArr","Event","split","i","eventStrArr","monsterId","Number","totalNum","startTime","endTime","diffTime","secNum","Math","floor","diffNum","monsterEventObj","HpUp","curNum","push","getBossEventByWeight","start","end","sum","weightArr","element","weight","random","index","some","item","idx","onCreateMonster","createrNum","monsterObj","id","monsterItem","pos","monsterCfg","getMonsterCfgById","has","mType","BOSS","getScreenUpRandPos","getBossBrushPoint","getNodeItemById","get","toString","monsterParent","addChild","setPosition","getComponent","path","monsterPath","getPrefab","then","monsterPrefab","loadMonsterRes","iconPath","monsterIconPath","Icon","geSpriteFrame","data","iconSprite","getChildByName","spriteFrame","animPath","monsterAnimPath","loadDir","asert","animationCom","clip","addClip","name","Move","defaultClip","set","Id","onMonsterDie","emit","UPDATE_MONSTER_PROGRESS","killNum","children","clearNearMonster","MaxWave","gameOver","gameStart","showGameOverPopup","Box","scheduleOnce","GAME_BATTLE","CREATE_DROP_BOX","triggleBrushMonsterEvent","dt","len","event","num","n","splice","onAddNearMonster","skillKey","range","onEnable","on","CREATE_MONSTER","MONSTER_DIE","ADD_NEAR_MONSTER","onDisable","off","setMonsterSort","monsterItems","sort","x","y","round","position","setSiblingIndex","clear","destroyAllChildren","childUpdate","createNum","ceil"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA2BC,MAAAA,kB,OAAAA,kB;AAAgDC,MAAAA,W,OAAAA,W;AAAkBC,MAAAA,I,OAAAA,I;AAAsCC,MAAAA,I,OAAAA,I;AAAmBC,MAAAA,M,OAAAA,M;;AACtJC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,Y,iBAAAA,Y;;AACFC,MAAAA,a;;AACEC,MAAAA,S,iBAAAA,S;;AACmCC,MAAAA,W,iBAAAA,W;;AACnCC,MAAAA,W,kBAAAA,W;;AAEAC,MAAAA,W,kBAAAA,W;AAAaC,MAAAA,e,kBAAAA,e;AAAiBC,MAAAA,U,kBAAAA,U;;AAC9BC,MAAAA,S,kBAAAA,S;;AACAC,MAAAA,U,kBAAAA,U;;AACAC,MAAAA,gB,kBAAAA,gB;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBtB,U;;gCAGjBuB,c,WADZF,OAAO,CAAC,gBAAD,C,UAEHC,QAAQ,CAACnB,IAAD,C,2BAFb,MACaoB,cADb;AAAA;AAAA,0CACkD;AAAA;AAAA;;AAAA;;AAAA,eAGtCC,iBAHsC,GAGC,IAAIC,GAAJ,EAHD;AAGY;AAHZ,eAItCC,SAJsC,GAIlB,CAJkB;AAIhB;AAJgB,eAKtCC,qBALsC,GAKU,EALV;AAKa;AALb,eAMtCC,gBANsC,GAMA,EANA;AAMI;AANJ,eAOtCC,gBAPsC,GAOF,IAPE;AAOG;AAPH,eAQtCC,YARsC,GAQf,CARe;AAQZ;AARY,eAStCC,WATsC,GAShB,CATgB;AASd;AATc,eAWtCC,mBAXsC,GAWR,CAXQ;AAWN;AAXM,eAYtCC,YAZsC,GAYf,CAZe;AAAA;;AAc9CC,QAAAA,IAAI,GAAG;AACH,eAAKD,YAAL,GAAoB,CAApB;AACA;AAAA;AAAA,0CAAYE,QAAZ,CAAqBD,IAArB;AACH;AAED;;;AACAE,QAAAA,kBAAkB,GAAG;AACjB,cAAI;AAAA;AAAA,0CAAYD,QAAZ,CAAqBE,qBAArB,CAA2CC,MAA/C,EAAuD;AACnD,iBAAKT,gBAAL,GAAwB;AAAA;AAAA,4CAAYM,QAAZ,CAAqBE,qBAArB,CAA2CE,KAA3C,EAAxB;AACA;AAAA;AAAA,4CAAYJ,QAAZ,CAAqBK,IAArB,GAA4B,KAAKX,gBAAL,CAAsBY,IAAlD,CAFmD,CAGnD;;AACA,iBAAKC,oBAAL;AACH;AACJ;AAED;AACJ;AACA;;;AACIA,QAAAA,oBAAoB,GAAG;AACnB,eAAKZ,YAAL,GAAoB,CAApB;AACA,eAAKC,WAAL,GAAmB,CAAnB;AACA,cAAIY,KAAK,GAAG,KAAKd,gBAAL,CAAsBc,KAAlC;;AACA,cAAIC,QAAQ,GAAG,KAAKf,gBAAL,CAAsBgB,KAAtB,CAA4BC,KAA5B,CAAkC,GAAlC,CAAf,CAJmB,CAKnB;AACA;AACA;AACA;AACA;;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACN,MAA7B,EAAqCS,CAAC,EAAtC,EAA0C;AACtC,gBAAMC,WAAW,GAAGJ,QAAQ,CAACG,CAAD,CAAR,CAAYD,KAAZ,CAAkB,GAAlB,CAApB;AACA,gBAAIG,SAAS,GAAGC,MAAM,CAACF,WAAW,CAAC,CAAD,CAAZ,CAAtB;AACA,gBAAIG,QAAQ,GAAGD,MAAM,CAACF,WAAW,CAAC,CAAD,CAAZ,CAArB;AACA,gBAAII,SAAS,GAAGF,MAAM,CAACF,WAAW,CAAC,CAAD,CAAZ,CAAtB;AACA,gBAAIK,OAAO,GAAGH,MAAM,CAACF,WAAW,CAAC,CAAD,CAAZ,CAApB;AACA,gBAAIM,QAAQ,GAAID,OAAO,GAAGD,SAA1B;AACA,gBAAIG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWN,QAAQ,GAAGG,QAAtB,CAAb;AACA,gBAAII,OAAO,GAAGP,QAAQ,GAAGG,QAAQ,GAAGC,MAApC;AACA,gBAAII,eAAe,GAAG;AAAA;AAAA,qDAAtB;AACAA,YAAAA,eAAe,CAACC,IAAhB,GAAuB,KAAK/B,gBAAL,CAAsB+B,IAA7C;AACAD,YAAAA,eAAe,CAACV,SAAhB,GAA4BA,SAA5B;AACAU,YAAAA,eAAe,CAACP,SAAhB,GAA4BA,SAA5B;AACAO,YAAAA,eAAe,CAACJ,MAAhB,GAAyBA,MAAzB;AACAI,YAAAA,eAAe,CAACD,OAAhB,GAA0BA,OAA1B;AACAC,YAAAA,eAAe,CAACE,MAAhB,GAAyB,CAAzB;AACAF,YAAAA,eAAe,CAACR,QAAhB,GAA2BA,QAA3B;;AACA,iBAAKxB,qBAAL,CAA2BmC,IAA3B,CAAgCH,eAAhC;;AACA,iBAAK7B,YAAL,IAAqBqB,QAArB;AACH;AACJ;AAED;;;AACAY,QAAAA,oBAAoB,CAACnB,QAAD,EAA0B;AAC1C,cAAIoB,KAAK,GAAG,CAAZ;AACA,cAAIC,GAAG,GAAG,CAAV;AACA,cAAIC,GAAG,GAAG,CAAV;AACA,cAAIC,SAAS,GAAG,EAAhB;;AACA,eAAK,IAAIpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACN,MAA7B,EAAqCS,CAAC,EAAtC,EAA0C;AACtC,gBAAMqB,OAAO,GAAGxB,QAAQ,CAACG,CAAD,CAAxB;AACA,gBAAIC,WAAW,GAAGoB,OAAO,CAACtB,KAAR,CAAc,GAAd,CAAlB;AACA,gBAAIuB,MAAM,GAAGnB,MAAM,CAACF,WAAW,CAAC,CAAD,CAAZ,CAAnB;AACAmB,YAAAA,SAAS,CAACL,IAAV,CAAeO,MAAf;AACAH,YAAAA,GAAG,IAAIG,MAAP;AACH;;AACD,cAAIC,MAAM,GAAGd,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACc,MAAL,KAAgBJ,GAA3B,CAAb;AACA,cAAIK,KAAK,GAAG,CAAZ;AACAJ,UAAAA,SAAS,CAACK,IAAV,CAAe,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC1BT,YAAAA,GAAG,GAAGD,KAAK,GAAGS,IAAd;;AACA,gBAAIH,MAAM,IAAIN,KAAV,IAAmBM,MAAM,GAAGL,GAAhC,EAAqC;AACjCM,cAAAA,KAAK,GAAGG,GAAR;AACA,qBAAO,IAAP;AACH;;AACDV,YAAAA,KAAK,GAAGC,GAAR;AACH,WAPD;AAQA,iBAAOrB,QAAQ,CAAC2B,KAAD,CAAf;AACH;AAED;AACJ;AACA;;;AACII,QAAAA,eAAe,CAACC,UAAD,EAAqB;AAAA;;AAAA,uCACK;AACjC,gBAAI,KAAI,CAAChD,gBAAL,CAAsBU,MAA1B,EAAkC;AAC9B,kBAAIuC,UAAU,GAAG,KAAI,CAACjD,gBAAL,CAAsBW,KAAtB,EAAjB;;AACA,kBAAIU,SAAS,GAAG4B,UAAU,CAACC,EAA3B;AACA,kBAAIC,WAAiB,GAAG,IAAxB;AACA,kBAAIC,GAAG,GAAG,IAAI5E,IAAJ,EAAV;AACA,kBAAI6E,UAAU,GAAG;AAAA;AAAA,8CAAY9C,QAAZ,CAAqB+C,iBAArB,CAAuCjC,SAAvC,CAAjB;;AACA,kBAAI,KAAI,CAACzB,iBAAL,CAAuB2D,GAAvB,CAA2BlC,SAA3B,CAAJ,EAA2C;AACvC+B,gBAAAA,GAAG,GAAGC,UAAU,CAACG,KAAX,IAAoB;AAAA;AAAA,gDAAYC,IAAhC,GAAuC;AAAA;AAAA,gDAAYlD,QAAZ,CAAqBmD,kBAArB,EAAvC,GAAmF;AAAA;AAAA,gDAAYnD,QAAZ,CAAqBoD,iBAArB,EAAzF;AACAR,gBAAAA,WAAW,GAAG;AAAA;AAAA,gDAAY5C,QAAZ,CAAqBqD,eAArB,CAAqC,KAAI,CAAChE,iBAAL,CAAuBiE,GAAvB,CAA2BxC,SAA3B,CAArC,EAA4EA,SAAS,CAACyC,QAAV,EAA5E,CAAd;;AACA,gBAAA,KAAI,CAACC,aAAL,CAAmBC,QAAnB,CAA4Bb,WAA5B;;AACAA,gBAAAA,WAAW,CAACc,WAAZ,CAAwBb,GAAxB;AACAD,gBAAAA,WAAW,CAACe,YAAZ;AAAA;AAAA,gDAAsC5D,IAAtC,CAA2C+C,UAA3C,EAAuDJ,UAAvD;AACH,eAND,MAOK;AACD;AACA,oBAAIkB,IAAI,GAAG;AAAA;AAAA,4CAAUC,WAArB;AACA;AAAA;AAAA,oDAAcC,SAAd,CAAwBF,IAAxB,EAA8BG,IAA9B,CAAoCC,aAAD,IAA2B;AAC1D;AACA,kBAAA,KAAI,CAACC,cAAL,CAAoBvB,UAApB,EAAgCI,UAAhC,EAA4CkB,aAA5C;AACH,iBAHD;AAIH;AACJ;AACJ,WAxB+B;;AAChC,eAAK,IAAIpD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6B,UAApB,EAAgC7B,CAAC,EAAjC;AAAA;AAAA,WADgC,CAyBhC;;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIqD,QAAAA,cAAc,CAACvB,UAAD,EAAyBI,UAAzB,EAAiDkB,aAAjD,EAAwE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAIpB,WAAW,GAAG7E,WAAW,CAACiG,aAAD,CAA7B;AACA,cAAIE,QAAQ,GAAG;AAAA;AAAA,sCAAUC,eAAV,GAA4BrB,UAAU,CAACsB,IAAvC,GAA8C,cAA7D;AACA;AAAA;AAAA,8CAAcC,aAAd,CAA4BH,QAA5B,EAAsCH,IAAtC,CAA4CO,IAAD,IAAuB;AAC9D,gBAAIC,UAAU,GAAG3B,WAAW,CAAC4B,cAAZ,CAA2B,MAA3B,EAAmCb,YAAnC,CAAgDzF,MAAhD,CAAjB;AACAqG,YAAAA,UAAU,CAACE,WAAX,GAAyBH,IAAzB;AACH,WAHD,EAhBkF,CAoBlF;;AACA,cAAII,QAAQ,GAAG;AAAA;AAAA,sCAAUC,eAAzB;AACA;AAAA;AAAA,8CAAcC,OAAd,CAAsBF,QAAtB,EAAgCX,IAAhC,CAAsCc,KAAD,IAAiC;AAClE,gBAAIA,KAAK,CAAC1E,MAAV,EAAkB;AACd,kBAAI0C,GAAG,GAAGC,UAAU,CAACG,KAAX,IAAoB;AAAA;AAAA,8CAAYC,IAAhC,GAAuC;AAAA;AAAA,8CAAYlD,QAAZ,CAAqBmD,kBAArB,EAAvC,GAAmF;AAAA;AAAA,8CAAYnD,QAAZ,CAAqBoD,iBAArB,EAA7F;AACA,kBAAI0B,YAAY,GAAGlC,WAAW,CAAC4B,cAAZ,CAA2B,MAA3B,EAAmCb,YAAnC,CAAgD7F,kBAAhD,CAAnB;AACA,mBAAK0F,aAAL,CAAmBC,QAAnB,CAA4Bb,WAA5B;AACAA,cAAAA,WAAW,CAACc,WAAZ,CAAwBb,GAAxB;;AACA,mBAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiE,KAAK,CAAC1E,MAA1B,EAAkCS,CAAC,EAAnC,EAAuC;AACnC,oBAAImE,IAAI,GAAGF,KAAK,CAACjE,CAAD,CAAhB;AACAkE,gBAAAA,YAAY,CAACE,OAAb,CAAqBH,KAAK,CAACjE,CAAD,CAA1B;;AACA,oBAAImE,IAAI,CAACE,IAAL,IAAa;AAAA;AAAA,gDAAYC,IAA7B,EAAmC;AAC/BJ,kBAAAA,YAAY,CAACK,WAAb,GAA2BJ,IAA3B;AACH;AACJ;;AACDnC,cAAAA,WAAW,CAACe,YAAZ;AAAA;AAAA,8CAAsC5D,IAAtC,CAA2C+C,UAA3C,EAAuDJ,UAAvD;;AACA,mBAAKrD,iBAAL,CAAuB+F,GAAvB,CAA2BtC,UAAU,CAACuC,EAAtC,EAA0CzC,WAA1C;AACH;AACJ,WAhBD;AAiBH;AAED;AACJ;AACA;AACA;;;AACI0C,QAAAA,YAAY,CAACzC,GAAD,EAAY;AACpB,eAAKjD,WAAL,GADoB,CAEpB;;AACA;AAAA;AAAA,8CAAc2F,IAAd,CAAmB;AAAA;AAAA,sCAAUC,uBAA7B,EAAsD;AAAA;AAAA,0CAAYxF,QAAZ,CAAqByF,OAA3E,EAAoF,EAApF,EAHoB,CAIpB;;AACA,cAAI,CAAC,KAAKjC,aAAL,CAAmBkC,QAAnB,CAA4BvF,MAAjC,EAAyC;AACrC;AAAA;AAAA,4CAAYH,QAAZ,CAAqB2F,gBAArB,GADqC,CAErC;;AACA,gBAAI,KAAKjG,gBAAL,CAAsBY,IAAtB,IAA8B;AAAA;AAAA,4CAAYN,QAAZ,CAAqB4F,OAAvD,EAAgE;AAC5D;AACA;AAAA;AAAA,4CAAWC,QAAX,GAAsB,IAAtB;AACA;AAAA;AAAA,4CAAWC,SAAX,GAAuB,KAAvB;AACA;AAAA;AAAA,wDAAiB9F,QAAjB,CAA0B+F,iBAA1B,CAA4C,CAA5C;AACH,aALD,MAMK;AAED,kBAAI1F,IAAI,GAAG,KAAKX,gBAAL,CAAsBY,IAAtB,GAA6B,CAAxC,CAFC,CAGD;;AACA,kBAAI,KAAKZ,gBAAL,CAAsBsG,GAA1B,EAA+B;AAC3B;AACA,qBAAKC,YAAL,CAAkB,MAAM;AACpB;AAAA;AAAA,sDAAcV,IAAd,CAAmB;AAAA;AAAA,8CAAUW,WAA7B,EAA0C7F,IAA1C;AACA;AAAA;AAAA,sDAAckF,IAAd,CAAmB;AAAA;AAAA,8CAAUY,eAA7B,EAA8CtD,GAA9C;AAEH,iBAJD,EAIG,CAJH;AAKH,eAPD,MAQK;AACD;AACA,qBAAK5C,kBAAL;AACA;AAAA;AAAA,oDAAcsF,IAAd,CAAmB;AAAA;AAAA,4CAAUW,WAA7B,EAA0C,KAAKxG,gBAAL,CAAsBY,IAAhE;AACH;AACJ;AACJ;AACJ;AAGD;;;AACA8F,QAAAA,wBAAwB,CAACC,EAAD,EAAa;AACjC,eAAK9G,SAAL,IAAkB8G,EAAlB;AACA,eAAKvG,YAAL,IAAqBuG,EAArB;;AACA,cAAI,KAAKvG,YAAL,IAAqB,CAAzB,EAA4B;AACxB,iBAAK,IAAIc,CAAC,GAAG,CAAR,EAAW0F,GAAG,GAAG,KAAK9G,qBAAL,CAA2BW,MAAjD,EAAyDS,CAAC,GAAG0F,GAA7D,EAAkE1F,CAAC,EAAnE,EAAuE;AACnE,kBAAM2F,KAAK,GAAG,KAAK/G,qBAAL,CAA2BoB,CAA3B,CAAd;;AACA,kBAAI2F,KAAK,CAAC7E,MAAN,GAAe6E,KAAK,CAACvF,QAAzB,EAAmC;AAC/B,oBAAI,KAAKzB,SAAL,IAAkBgH,KAAK,CAACtF,SAA5B,EAAuC;AACnC,uBAAKnB,YAAL,GAAoB,CAApB,CADmC,CAEnC;;AACA,sBAAI0G,GAAG,GAAGD,KAAK,CAACnF,MAAhB;;AACA,sBAAImF,KAAK,CAAChF,OAAV,EAAmB;AACfgF,oBAAAA,KAAK,CAAChF,OAAN;AACAiF,oBAAAA,GAAG,IAAI,CAAP;AACH;;AACD,uBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,EAA1B,EAA8B;AAC1B,wBAAI/D,UAAU,GAAG;AAAA;AAAA,mDAAjB;AACAA,oBAAAA,UAAU,CAACC,EAAX,GAAgB4D,KAAK,CAACzF,SAAtB;AACA4B,oBAAAA,UAAU,CAACjB,IAAX,GAAkB8E,KAAK,CAAC9E,IAAxB;;AACA,yBAAKhC,gBAAL,CAAsBkC,IAAtB,CAA2Be,UAA3B;AACH;;AACD6D,kBAAAA,KAAK,CAAC7E,MAAN,IAAgB8E,GAAhB;AACH;AACJ,eAjBD,MAkBK;AACD;AACA,qBAAKhH,qBAAL,CAA2BkH,MAA3B,CAAkC9F,CAAlC,EAAqC,CAArC;;AACAA,gBAAAA,CAAC;AACD0F,gBAAAA,GAAG;AACN;AACJ;AACJ;AACJ;AAGD;;;AACAK,QAAAA,gBAAgB,CAACC,QAAD,EAAmBC,KAAnB,EAAkC,CAEjD;;AAESC,QAAAA,QAAQ,GAAS;AACvB;AAAA;AAAA,8CAAcC,EAAd,CAAiB;AAAA;AAAA,4CAAaC,cAA9B,EAA8C,KAAKxE,eAAnD,EAAoE,IAApE;AACA;AAAA;AAAA,8CAAcuE,EAAd,CAAiB;AAAA;AAAA,4CAAaE,WAA9B,EAA2C,KAAK3B,YAAhD,EAA8D,IAA9D;AACA;AAAA;AAAA,8CAAcyB,EAAd,CAAiB;AAAA;AAAA,4CAAaG,gBAA9B,EAAgD,KAAKP,gBAArD,EAAuE,IAAvE;AACH;;AAESQ,QAAAA,SAAS,GAAS;AACxB;AAAA;AAAA,8CAAcC,GAAd,CAAkB;AAAA;AAAA,4CAAaJ,cAA/B,EAA+C,KAAKxE,eAApD,EAAqE,IAArE;AACA;AAAA;AAAA,8CAAc4E,GAAd,CAAkB;AAAA;AAAA,4CAAaH,WAA/B,EAA4C,KAAK3B,YAAjD,EAA+D,IAA/D;AACA;AAAA;AAAA,8CAAc8B,GAAd,CAAkB;AAAA;AAAA,4CAAaF,gBAA/B,EAAiD,KAAKP,gBAAtD,EAAwE,IAAxE;AACH;;AAEDU,QAAAA,cAAc,GAAG;AACb,cAAIC,YAAY,GAAG,KAAK9D,aAAL,CAAmBkC,QAAtC;AACA4B,UAAAA,YAAY,CAACC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACxB,mBAAOpG,IAAI,CAACqG,KAAL,CAAWD,CAAC,CAACE,QAAF,CAAWF,CAAtB,IAA2BpG,IAAI,CAACqG,KAAL,CAAWF,CAAC,CAACG,QAAF,CAAWF,CAAtB,CAAlC;AACH,WAFD;;AAGA,eAAK,IAAI7G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0G,YAAY,CAACnH,MAAjC,EAAyCS,CAAC,EAA1C,EAA8C;AAC1C0G,YAAAA,YAAY,CAAC1G,CAAD,CAAZ,CAAgBgH,eAAhB,CAAgChH,CAAhC;AACH;AACJ;;AAEDiH,QAAAA,KAAK,GAAG;AACJ,eAAKxI,iBAAL,CAAuBwI,KAAvB;;AACA;AAAA;AAAA,0CAAY7H,QAAZ,CAAqB6H,KAArB;AACA,eAAKtI,SAAL,GAAiB,CAAjB;AACA,eAAKO,YAAL,GAAoB,CAApB;AACA,eAAKN,qBAAL,GAA6B,EAA7B;AACA,eAAKC,gBAAL,GAAwB,EAAxB;AACA,eAAKC,gBAAL,GAAwB,IAAxB;AACA,eAAK8D,aAAL,CAAmBsE,kBAAnB;AACH;;AAEDC,QAAAA,WAAW,CAAC1B,EAAD,EAAa;AACpB,cAAI;AAAA;AAAA,wCAAWP,SAAf,EAA0B;AACtB,iBAAKM,wBAAL,CAA8BC,EAA9B;AACA,iBAAKgB,cAAL;;AACA,gBAAI,KAAK5H,gBAAL,CAAsBU,MAA1B,EAAkC;AAC9B,kBAAI6H,SAAS,GAAG,KAAKvI,gBAAL,CAAsBU,MAAtB,GAA+B,EAA/B,GAAoCkB,IAAI,CAAC4G,IAAL,CAAU,KAAKxI,gBAAL,CAAsBU,MAAtB,GAA+B,EAAzC,CAApC,GAAmF,CAAnG;AACA,mBAAKqC,eAAL,CAAqBwF,SAArB;AACH;AACJ;AACJ;;AAnS6C,O;;;;;iBAExB,I","sourcesContent":["import { _decorator, AnimationClip, AnimationComponent, Asset, Component, director, instantiate, log, Node, Prefab, Skeleton, sp, v3, Vec2, Vec3, SpriteFrame, Sprite } from 'cc';\r\nimport { PoolManager } from '../../Frame/PoolManager';\r\nimport { MonsterItem } from '../Monster/MonsterItem';\r\nimport { ResourcesUtil } from '../../Frame/ResourcesUtil';\r\nimport { EventListener } from '../../Frame/EventListener';\r\nimport { MonsterEvent } from '../Monster/Event/MonsterEvent';\r\nimport BaseComponent from '../../Frame/BaseComponent';\r\nimport { GameEvent } from '../Event/GameEvent';\r\nimport { BrushMonsterType, ChapterEventCfg, MonsterType } from '../../Model/ChapterEventModel';\r\nimport { MonsterAmin, MonsterCfg } from '../../Model/MonsterModel';\r\nimport { Debug } from '../../Frame/Debug';\r\nimport { MonsterData, MonsterEventObj, MonsterObj } from '../Data/MonsterData';\r\nimport { Constants } from '../../Constants';\r\nimport { GameDefine } from '../../GameDefine';\r\nimport { OpenPopupManager } from '../../Frame/OpenPopupManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('MonsterManager')\r\nexport class MonsterManager extends BaseComponent {\r\n    @property(Node)\r\n    monsterParent: Node = null;\r\n    private _monsterPrefabMap: Map<number, Node> = new Map(); //怪物\r\n    private _gameTime: number = 0;//游戏时间\r\n    private _brushMonsterEventArr: Array<MonsterEventObj> = [];//当前刷怪事件数据\r\n    private _queeuMonsterArr: Array<MonsterObj> = []; //队列怪物\r\n    private _curChapterEvent: ChapterEventCfg = null;//当前刷怪事件\r\n    private _curTotalNum: number = 0; //当前事件总刷怪数量\r\n    private _curKillNum: number = 0;//当前击杀怪物数量\r\n\r\n    private _screenMonsterCount: number = 0;//屏幕上存在的怪物\r\n    private _schduleTime: number = 1;\r\n\r\n    init() {\r\n        this._schduleTime = 1;\r\n        MonsterData.instance.init();\r\n    }\r\n\r\n    /* 设置当前刷怪事件 */\r\n    setCurChapterEvent() {\r\n        if (MonsterData.instance.brushMonsterEventData.length) {\r\n            this._curChapterEvent = MonsterData.instance.brushMonsterEventData.shift();\r\n            MonsterData.instance.wave = this._curChapterEvent.Wave;\r\n            // Debug.log('当前刷怪事件', this._curChapterEvent);\r\n            this.setBrushMonsterEvent();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置刷怪事件组\r\n     */\r\n    setBrushMonsterEvent() {\r\n        this._curTotalNum = 0;\r\n        this._curKillNum = 0;\r\n        let eType = this._curChapterEvent.eType\r\n        let eventArr = this._curChapterEvent.Event.split(',');\r\n        // if (eType == BrushMonsterType.BOSS) {\r\n        //     //boss事件(随机boss事件)\r\n        //     eventArr = [this.getBossEventByWeight(eventArr)];\r\n        // }\r\n        //刷怪事件\r\n        for (let i = 0; i < eventArr.length; i++) {\r\n            const eventStrArr = eventArr[i].split('|');\r\n            let monsterId = Number(eventStrArr[0]);\r\n            let totalNum = Number(eventStrArr[1]);\r\n            let startTime = Number(eventStrArr[2]);\r\n            let endTime = Number(eventStrArr[3]);\r\n            let diffTime = (endTime - startTime);\r\n            let secNum = Math.floor(totalNum / diffTime);\r\n            let diffNum = totalNum - diffTime * secNum;\r\n            let monsterEventObj = new MonsterEventObj();\r\n            monsterEventObj.HpUp = this._curChapterEvent.HpUp;\r\n            monsterEventObj.monsterId = monsterId;\r\n            monsterEventObj.startTime = startTime;\r\n            monsterEventObj.secNum = secNum;\r\n            monsterEventObj.diffNum = diffNum;\r\n            monsterEventObj.curNum = 0;\r\n            monsterEventObj.totalNum = totalNum;\r\n            this._brushMonsterEventArr.push(monsterEventObj);\r\n            this._curTotalNum += totalNum;\r\n        }\r\n    }\r\n\r\n    /* 通过权重获取boss事件 */\r\n    getBossEventByWeight(eventArr: Array<string>) {\r\n        let start = 0;\r\n        let end = 0;\r\n        let sum = 0;\r\n        let weightArr = [];\r\n        for (let i = 0; i < eventArr.length; i++) {\r\n            const element = eventArr[i];\r\n            let eventStrArr = element.split('|');\r\n            let weight = Number(eventStrArr[4]);\r\n            weightArr.push(weight);\r\n            sum += weight;\r\n        }\r\n        let random = Math.floor(Math.random() * sum);\r\n        let index = 0;\r\n        weightArr.some((item, idx) => {\r\n            end = start + item;\r\n            if (random >= start && random < end) {\r\n                index = idx;\r\n                return true;\r\n            }\r\n            start = end;\r\n        })\r\n        return eventArr[index];\r\n    }\r\n\r\n    /**\r\n     * 创建怪物\r\n     */\r\n    onCreateMonster(createrNum: number) {\r\n        for (let i = 0; i < createrNum; i++) {\r\n            if (this._queeuMonsterArr.length) {\r\n                let monsterObj = this._queeuMonsterArr.shift();\r\n                let monsterId = monsterObj.id;\r\n                let monsterItem: Node = null;\r\n                let pos = new Vec3();\r\n                let monsterCfg = MonsterData.instance.getMonsterCfgById(monsterId);\r\n                if (this._monsterPrefabMap.has(monsterId)) {\r\n                    pos = monsterCfg.mType != MonsterType.BOSS ? MonsterData.instance.getScreenUpRandPos() : MonsterData.instance.getBossBrushPoint();\r\n                    monsterItem = PoolManager.instance.getNodeItemById(this._monsterPrefabMap.get(monsterId), monsterId.toString());\r\n                    this.monsterParent.addChild(monsterItem);\r\n                    monsterItem.setPosition(pos);\r\n                    monsterItem.getComponent(MonsterItem).init(monsterCfg, monsterObj);\r\n                }\r\n                else {\r\n                    //动态加载\r\n                    let path = Constants.monsterPath;\r\n                    ResourcesUtil.getPrefab(path).then((monsterPrefab: Prefab) => {\r\n                        //加载资源\r\n                        this.loadMonsterRes(monsterObj, monsterCfg, monsterPrefab);\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        // Debug.log('地图上怪物数量', this.monsterParent.children.length);\r\n    }\r\n\r\n    /**\r\n     * 加载怪物资源 动画资源\r\n     * @param monsterObj \r\n     * @param monsterCfg \r\n     * @param monsterPrefab \r\n     */\r\n    loadMonsterRes(monsterObj: MonsterObj, monsterCfg: MonsterCfg, monsterPrefab: Prefab) {\r\n        //加载骨骼资源\r\n        // let spinePath = Constants.monsterSpinePath + monsterCfg.Icon;\r\n        // ResourcesUtil.getSkeletonData(spinePath).then((data: sp.SkeletonData) => {\r\n        //     let pos = MonsterData.instance.getBossBrushPoint();\r\n        //     let monsterItem = instantiate(monsterPrefab);\r\n        //     let spine = monsterItem.getChildByName('spine').getComponent(sp.Skeleton);\r\n        //     this.monsterParent.addChild(monsterItem);\r\n        //     monsterItem.setPosition(pos);\r\n        //     spine.skeletonData = data;\r\n        //     monsterItem.getComponent(MonsterItem).init(monsterCfg, monsterObj);\r\n        //     this._monsterPrefabMap.set(monsterCfg.Id, monsterItem);\r\n        // })\r\n        //加载图片资源\r\n        let monsterItem = instantiate(monsterPrefab);\r\n        let iconPath = Constants.monsterIconPath + monsterCfg.Icon + '/spriteFrame';\r\n        ResourcesUtil.geSpriteFrame(iconPath).then((data: SpriteFrame) => {\r\n            let iconSprite = monsterItem.getChildByName('icon').getComponent(Sprite);\r\n            iconSprite.spriteFrame = data;\r\n        })\r\n        //加载动画资源\r\n        let animPath = Constants.monsterAnimPath;\r\n        ResourcesUtil.loadDir(animPath).then((asert: Array<AnimationClip>) => {\r\n            if (asert.length) {\r\n                let pos = monsterCfg.mType != MonsterType.BOSS ? MonsterData.instance.getScreenUpRandPos() : MonsterData.instance.getBossBrushPoint();\r\n                let animationCom = monsterItem.getChildByName('icon').getComponent(AnimationComponent);\r\n                this.monsterParent.addChild(monsterItem);\r\n                monsterItem.setPosition(pos);\r\n                for (let i = 0; i < asert.length; i++) {\r\n                    let clip = asert[i];\r\n                    animationCom.addClip(asert[i]);\r\n                    if (clip.name == MonsterAmin.Move) {\r\n                        animationCom.defaultClip = clip;\r\n                    }\r\n                }\r\n                monsterItem.getComponent(MonsterItem).init(monsterCfg, monsterObj);\r\n                this._monsterPrefabMap.set(monsterCfg.Id, monsterItem);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 怪物死亡\r\n     * @param pos \r\n     */\r\n    onMonsterDie(pos: Vec3) {\r\n        this._curKillNum++;\r\n        //更新进度\r\n        EventListener.emit(GameEvent.UPDATE_MONSTER_PROGRESS, MonsterData.instance.killNum, 10);\r\n        //检测当前怪物是否已经清除\r\n        if (!this.monsterParent.children.length) {\r\n            MonsterData.instance.clearNearMonster();\r\n            //TODO检测是否战斗结束\r\n            if (this._curChapterEvent.Wave >= MonsterData.instance.MaxWave) {\r\n                //无刷怪事件 游戏胜利\r\n                GameDefine.gameOver = true;\r\n                GameDefine.gameStart = false;\r\n                OpenPopupManager.instance.showGameOverPopup(1);\r\n            }\r\n            else {\r\n\r\n                let wave = this._curChapterEvent.Wave + 1;\r\n                //检测是否有宝箱\r\n                if (this._curChapterEvent.Box) {\r\n                    //有宝箱\r\n                    this.scheduleOnce(() => {\r\n                        EventListener.emit(GameEvent.GAME_BATTLE, wave);\r\n                        EventListener.emit(GameEvent.CREATE_DROP_BOX, pos);\r\n\r\n                    }, 1)\r\n                }\r\n                else {\r\n                    //进入下一时间轴\r\n                    this.setCurChapterEvent();\r\n                    EventListener.emit(GameEvent.GAME_BATTLE, this._curChapterEvent.Wave);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /* 触发刷怪事件 */\r\n    triggleBrushMonsterEvent(dt: number) {\r\n        this._gameTime += dt;\r\n        this._schduleTime -= dt;\r\n        if (this._schduleTime <= 0) {\r\n            for (let i = 0, len = this._brushMonsterEventArr.length; i < len; i++) {\r\n                const event = this._brushMonsterEventArr[i];\r\n                if (event.curNum < event.totalNum) {\r\n                    if (this._gameTime >= event.startTime) {\r\n                        this._schduleTime = 1;\r\n                        //加入队列怪物\r\n                        let num = event.secNum;\r\n                        if (event.diffNum) {\r\n                            event.diffNum--;\r\n                            num += 1;\r\n                        }\r\n                        for (let n = 0; n < num; n++) {\r\n                            let monsterObj = new MonsterObj();\r\n                            monsterObj.id = event.monsterId;\r\n                            monsterObj.HpUp = event.HpUp;\r\n                            this._queeuMonsterArr.push(monsterObj);\r\n                        }\r\n                        event.curNum += num;\r\n                    }\r\n                }\r\n                else {\r\n                    //清除刷怪事件\r\n                    this._brushMonsterEventArr.splice(i, 1);\r\n                    i--;\r\n                    len--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /* 添加技能最近怪物 */\r\n    onAddNearMonster(skillKey: string, range: number) {\r\n\r\n    }\r\n\r\n    protected onEnable(): void {\r\n        EventListener.on(MonsterEvent.CREATE_MONSTER, this.onCreateMonster, this);\r\n        EventListener.on(MonsterEvent.MONSTER_DIE, this.onMonsterDie, this);\r\n        EventListener.on(MonsterEvent.ADD_NEAR_MONSTER, this.onAddNearMonster, this);\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        EventListener.off(MonsterEvent.CREATE_MONSTER, this.onCreateMonster, this);\r\n        EventListener.off(MonsterEvent.MONSTER_DIE, this.onMonsterDie, this);\r\n        EventListener.off(MonsterEvent.ADD_NEAR_MONSTER, this.onAddNearMonster, this);\r\n    }\r\n\r\n    setMonsterSort() {\r\n        let monsterItems = this.monsterParent.children;\r\n        monsterItems.sort((x, y) => {\r\n            return Math.round(y.position.y) - Math.round(x.position.y);\r\n        })\r\n        for (let i = 0; i < monsterItems.length; i++) {\r\n            monsterItems[i].setSiblingIndex(i);\r\n        }\r\n    }\r\n\r\n    clear() {\r\n        this._monsterPrefabMap.clear();\r\n        MonsterData.instance.clear();\r\n        this._gameTime = 0;\r\n        this._schduleTime = 1\r\n        this._brushMonsterEventArr = [];\r\n        this._queeuMonsterArr = [];\r\n        this._curChapterEvent = null;\r\n        this.monsterParent.destroyAllChildren();\r\n    }\r\n\r\n    childUpdate(dt: number) {\r\n        if (GameDefine.gameStart) {\r\n            this.triggleBrushMonsterEvent(dt);\r\n            this.setMonsterSort();\r\n            if (this._queeuMonsterArr.length) {\r\n                let createNum = this._queeuMonsterArr.length > 60 ? Math.ceil(this._queeuMonsterArr.length / 60) : 1;\r\n                this.onCreateMonster(createNum);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}