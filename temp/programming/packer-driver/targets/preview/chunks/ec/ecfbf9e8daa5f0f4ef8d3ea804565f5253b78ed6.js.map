{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Game/Data/MonsterData.ts"],"names":["MonsterData","MonsterObj","MonsterEventObj","Vec2","Vec3","v3","view","ChapterEventCfg","CfgMgr","Util","MonsterCfg","GameDefine","_nearMonsterData","Map","_monsterNodeMap","_maxCheckCont","_brushMonsterPoint","_killNum","_killBossNum","_brushMonsterEventData","_wave","_MaxWave","wave","value","MaxWave","killBossNum","killNum","brushMonsterEventData","init","clone","getCfgDataArray","length","Wave","setNearMonster","skillKey","skillPos","range","monsterComMap","has","get","size","addSkillRangeMonster","set","monsterBaseArr","Array","from","values","i","element","monsterPos","curPos","monsteKey","monsterKey","len","distance","getNearMonster","targetArr","push","deleteNearMonster","forEach","item","key","delete","clearNearMonster","clear","getNearMonsterTarget","monsterCom","checkNearMonster","addMonsterNodeByKey","deleteMonsterNodeByKey","checkSkillNearMonster","check","initStatus","setBrushMonsterPoint","pid","rect","setBossBrushPoint","pos","getAppointMonsterPoint","Offset","Math","floor","random","getRectRandPos","x","y","getBossBrushPoint","viewHeight","getScreenUpRandPos","visibleSize","getVisibleSize","width","height","getMonsterCfgById","monsterId","getDataById","getMonsterAtk","mType","getMonsterHp","hp","getMonsterSpeed","speed","instance","_instance","id","HpUp","startTime","secNum","diffNum","curNum","totalNum"],"mappings":"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","sourcesContent":["import { Intersection2D, Rect, Vec2, Vec3, isValid, log, v2, v3, view } from \"cc\";\r\nimport { MonsterBase } from \"../Monster/MonsterBase\";\r\nimport { ChapterEventCfg } from \"../../Model/ChapterEventModel\";\r\nimport { CfgMgr } from \"../../Frame/CfgMgr\";\r\nimport { Util } from \"../../Frame/Util\";\r\nimport { MonsterCfg } from \"../../Model/MonsterModel\";\r\nimport { GameDefine } from \"../../GameDefine\";\r\n\r\nexport class MonsterData {\r\n    private _nearMonsterData: Map<string, Map<string, MonsterBase>> = new Map(); //多技能对应最近怪物  key=>角色id + | + pid  value=>怪物脚本\r\n    private _monsterNodeMap: Map<string, MonsterBase> = new Map();//怪物节点\r\n    private _maxCheckCont: number = 3;//最大检测数量\r\n    private _brushMonsterPoint: Map<number, Rect> = new Map();//刷怪点数据\r\n    private _killNum: number = 0;//杀死怪物数量\r\n    private _killBossNum: number = 0;//杀死boss的数量\r\n    private _brushMonsterEventData: Array<ChapterEventCfg> = [];//刷怪事件数据\r\n    private _wave: number = 0;//刷怪波次\r\n    private _MaxWave: number = 10;//最大波次\r\n\r\n    public set wave(value: number) {\r\n        this._wave = value;\r\n    }\r\n\r\n    public get wave() {\r\n        return this._wave;\r\n    }\r\n\r\n    public set MaxWave(value: number) {\r\n        this._MaxWave = value;\r\n    }\r\n\r\n    public get MaxWave() {\r\n        return this._MaxWave;\r\n    }\r\n\r\n    public get killBossNum() {\r\n        return this._killBossNum;\r\n    }\r\n\r\n    public set killBossNum(value: number) {\r\n        this._killBossNum += value;\r\n    }\r\n\r\n    public get killNum() {\r\n        return this._killNum;\r\n    }\r\n\r\n    public set killNum(value: number) {\r\n        this._killNum += value;\r\n    }\r\n\r\n    public get brushMonsterEventData() {\r\n        return this._brushMonsterEventData;\r\n    }\r\n\r\n    init() {\r\n        this._brushMonsterEventData = Util.clone(CfgMgr.getCfgDataArray<ChapterEventCfg>(new ChapterEventCfg()));\r\n        this.MaxWave = this._brushMonsterEventData[this._brushMonsterEventData.length - 1].Wave;\r\n    }\r\n\r\n    /**\r\n     * 设置最近的怪物\r\n     */\r\n    setNearMonster(skillKey: string, skillPos: Vec3, range: number) {\r\n        let monsterComMap = new Map();\r\n        if (this._nearMonsterData.has(skillKey)) {\r\n            monsterComMap = this._nearMonsterData.get(skillKey);\r\n            if (monsterComMap.size < this._maxCheckCont) {\r\n                //添加范围怪物\r\n                this.addSkillRangeMonster(skillPos, range, monsterComMap);\r\n            }\r\n        }\r\n        else {\r\n            //添加范围怪物\r\n            this._nearMonsterData.set(skillKey, monsterComMap);\r\n            this.addSkillRangeMonster(skillPos, range, monsterComMap);\r\n\r\n        }\r\n    }\r\n\r\n    /* 添加范围怪物 */\r\n    addSkillRangeMonster(skillPos: Vec3, range: number, monsterComMap) {\r\n        let monsterBaseArr = Array.from(this._monsterNodeMap.values());\r\n        for (let i = 0; i < monsterBaseArr.length; i++) {\r\n            const element = monsterBaseArr[i];\r\n            let monsterPos = element.curPos;\r\n            let monsteKey = element.monsterKey;\r\n            let len = Vec3.distance(skillPos, monsterPos);\r\n            if (len <= range && monsterComMap.size < this._maxCheckCont) {\r\n                monsterComMap.set(monsteKey, element);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /* 获取技能最近的怪物 */\r\n    getNearMonster(skillKey: string) {\r\n        let targetArr = [];\r\n        if (this._nearMonsterData.has(skillKey)) {\r\n            let monsterBaseArr = Array.from(this._nearMonsterData.get(skillKey).values());\r\n            for (let i = 0; i < monsterBaseArr.length; i++) {\r\n                const element = monsterBaseArr[i];\r\n                if (element) {\r\n                    targetArr.push(element.curPos);\r\n                }\r\n\r\n            }\r\n        }\r\n        return targetArr;\r\n    }\r\n\r\n    /**\r\n     * 删除最近怪物\r\n     * @param roleId \r\n     */\r\n    deleteNearMonster(monsterKey: string) {\r\n        this._nearMonsterData.forEach((item, key) => {\r\n            if (item.has(monsterKey)) {\r\n                item.delete(monsterKey);\r\n            }\r\n        })\r\n    }\r\n\r\n    /* 清楚最近的怪物 */\r\n    clearNearMonster() {\r\n        this._nearMonsterData.clear();\r\n    }\r\n\r\n    /**\r\n     * 获得最近怪物\r\n     * @param skillKey \r\n     */\r\n    getNearMonsterTarget(skillKey: string) {\r\n        let monsterCom = new Map();\r\n        if (this._nearMonsterData.has(skillKey)) {\r\n            monsterCom = this._nearMonsterData.get(skillKey);\r\n        }\r\n        return monsterCom\r\n    }\r\n\r\n    /**\r\n     * 检测是否有最近怪物\r\n     * @param skillKey \r\n     */\r\n    checkNearMonster(skillKey: string) {\r\n        if (this._nearMonsterData.has(skillKey)) {\r\n            let monsterComMap = this._nearMonsterData.get(skillKey);\r\n            return monsterComMap.size ? true : false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n      * 添加怪物节点\r\n      */\r\n    addMonsterNodeByKey(monsterCom: MonsterBase) {\r\n        if (monsterCom) {\r\n            this._monsterNodeMap.set(monsterCom.monsterKey, monsterCom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除怪物节点\r\n     */\r\n    deleteMonsterNodeByKey(monsterKey: string) {\r\n        this._monsterNodeMap.delete(monsterKey);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 检测技能范围内是否有怪物\r\n     * @param skillPos \r\n     * @param range \r\n     */\r\n    checkSkillNearMonster(skillPos: Vec3, range: number) {\r\n        let check = false;\r\n        if (this._monsterNodeMap.size) {\r\n            let monsterBaseArr = Array.from(this._monsterNodeMap.values());\r\n            for (let i = 0; i < monsterBaseArr.length; i++) {\r\n                const element = monsterBaseArr[i];\r\n                if (element && element.initStatus) {\r\n                    let monsterPos = element.curPos;\r\n                    let len = Vec3.distance(skillPos, monsterPos);\r\n                    if (len <= range) {\r\n                        check = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        return check;\r\n    }\r\n\r\n\r\n    /**\r\n     * 设置刷怪点数据\r\n     * @param pid \r\n     * @param pos \r\n     */\r\n    setBrushMonsterPoint(pid: number, rect: Rect) {\r\n        this._brushMonsterPoint.set(pid, rect);\r\n    }\r\n\r\n    /**\r\n     * 设置boss刷怪点数据\r\n     * @param pid \r\n     * @param pos \r\n     */\r\n    setBossBrushPoint(pid: number, pos: Vec3) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 获取指定刷怪随机点\r\n     * @param Offset \r\n     */\r\n    getAppointMonsterPoint(Offset: Vec2 = new Vec2(0, 100)) {\r\n        let len = this._brushMonsterPoint.size;\r\n        let pid = Math.floor(Math.random() * len);\r\n        let rect = this._brushMonsterPoint.get(pid);\r\n        //获取区域内随机坐标点\r\n        let pos = Util.getRectRandPos(rect);\r\n        pos.x += Offset.x;\r\n        pos.y += Offset.y;\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * 获取boss刷怪点数据\r\n     * @param pid \r\n     */\r\n    getBossBrushPoint(Offset: Vec2 = new Vec2(100, 100)) {\r\n        let x = 0;\r\n        let y = GameDefine.viewHeight / 2 + Math.random() * Offset.x;\r\n        return v3(x, y, 0);\r\n    }\r\n\r\n    /**\r\n     * 获取屏幕上方怪物随机位置\r\n     * @param Offset  偏移位置 \r\n     */\r\n    getScreenUpRandPos(Offset: Vec2 = new Vec2(60, 50)) {\r\n        let visibleSize = view.getVisibleSize();\r\n        let width = visibleSize.width - Offset.x;\r\n        let pos = new Vec3();\r\n        pos.x = (Math.random() - 0.5) * width;\r\n        pos.y = visibleSize.height / 2 + Math.random() * Offset.y - 200;\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * 通过怪物id 获取怪物配置\r\n     * @param monsterId \r\n     */\r\n    getMonsterCfgById(monsterId: number) {\r\n        return CfgMgr.getDataById<MonsterCfg>(new MonsterCfg(), monsterId);\r\n    }\r\n\r\n    /**\r\n     * 获取怪物攻击\r\n     * @param mType 怪物 类型\r\n     */\r\n    getMonsterAtk(mType: number) {\r\n        // switch (mType) {\r\n        //     case MonsterType.LITTLE:\r\n        //         break;\r\n        //     case MonsterType.ELITE:\r\n        //         atk = atk * Number(Constants.SysConstant.EliteAtt.ConstantValue);\r\n        //         break;\r\n        //     case MonsterType.BOSS:\r\n        //         atk = atk * Number(Constants.SysConstant.BossAtt.ConstantValue);\r\n        //         break;\r\n        // }\r\n        return 10;\r\n    }\r\n\r\n    /**\r\n     * 获取怪物血量\r\n     */\r\n    getMonsterHp(hp: number) {\r\n        return hp;\r\n    }\r\n\r\n    /**\r\n     * 获取怪物移动速度\r\n     */\r\n    getMonsterSpeed(speed: number) {\r\n        return speed;\r\n    }\r\n\r\n    clear() {\r\n        this._nearMonsterData.clear();\r\n        this._monsterNodeMap.clear();\r\n        this._brushMonsterPoint.clear();\r\n        this._killNum = 0;\r\n        this._killBossNum = 0;\r\n        this._wave = 0;\r\n        this._MaxWave = 15;\r\n        this._brushMonsterEventData = [];\r\n    }\r\n\r\n    private static _instance: MonsterData = null;\r\n    public static get instance(): MonsterData {\r\n        if (!this._instance) {\r\n            this._instance = new MonsterData();\r\n        }\r\n        return this._instance;\r\n    }\r\n}\r\n\r\nexport class MonsterObj {\r\n    id: number; //怪物id\r\n    HpUp: number = 1;//血量系数\r\n}\r\n\r\nexport class MonsterEventObj {\r\n    //刷怪数量到结束事件\r\n    monsterId: number;//怪物数据\r\n    HpUp: number;//怪物血量系数\r\n    startTime: number;//刷怪开始时间\r\n    secNum: number;//每秒刷怪数量\r\n    diffNum: number;//每秒刷怪向下取整  相差数量分配\r\n    curNum: number = 0;//当前刷怪数量\r\n    totalNum: number = 1;//总的的刷怪数量\r\n}\r\n\r\n\r\n"]}