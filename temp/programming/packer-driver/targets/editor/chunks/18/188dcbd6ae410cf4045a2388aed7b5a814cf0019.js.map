{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Frame/PoolManager.ts"],"names":["PoolManager","Component","NodePool","instantiate","_dictPool","instance","_instance","getNode","prefab","parent","name","position","data","node","hasOwnProperty","pool","size","get","setPosition","active","getNodeItem","getNodeItemById","Node","key","putNodeByKey","put","getPoolSizeByPrefab","num","putPool","putNode","clearPool","clear","prePool","nodeNum","i"],"mappings":"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","sourcesContent":["import { Component, NodePool, Prefab, instantiate, Node } from \"cc\";\r\n\r\nexport class PoolManager extends Component {\r\n\r\n    private _dictPool: any = {}\r\n\r\n    static _instance: PoolManager;\r\n    static get instance() {\r\n        if (this._instance) {\r\n            return this._instance;\r\n        }\r\n\r\n        this._instance = new PoolManager();\r\n        return this._instance;\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据预设从对象池中获取对应节点\r\n     */\r\n    public getNode(prefab: Prefab, parent: Node) {\r\n        let name = prefab.name;\r\n        //@ts-ignore\r\n        if (!prefab.position) {\r\n            //@ts-ignore\r\n            name = prefab.data.name;\r\n        }\r\n        let node = null;\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            //已有对应的对象池\r\n            let pool = this._dictPool[name];\r\n            if (pool.size() > 0) {\r\n                node = pool.get();\r\n            } else {\r\n                node = instantiate(prefab);\r\n            }\r\n        } else {\r\n            //没有对应对象池，创建他！\r\n            let pool = new NodePool();\r\n            this._dictPool[name] = pool;\r\n            node = instantiate(prefab);\r\n        }\r\n        node.parent = parent;\r\n        node.setPosition(10000, 100000);\r\n        node.active = true;\r\n        return node;\r\n    }\r\n\r\n    /**\r\n    * 根据预设从对象池中获取对应节点\r\n    */\r\n    public getNodeItem(prefab: Prefab) {\r\n        let name = prefab.name;\r\n        //@ts-ignore\r\n        if (!prefab.position) {\r\n            //@ts-ignore\r\n            name = prefab.data.name;\r\n        }\r\n        let node = null;\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            //已有对应的对象池\r\n            let pool = this._dictPool[name];\r\n            if (pool.size() > 0) {\r\n                node = pool.get();\r\n            } else {\r\n                node = instantiate(prefab);\r\n            }\r\n        } else {\r\n            //没有对应对象池，创建他！\r\n            let pool = new NodePool();\r\n            this._dictPool[name] = pool;\r\n            node = instantiate(prefab);\r\n        }\r\n        node.setPosition(10000, 100000);\r\n        node.active = true;\r\n        return node;\r\n    }\r\n\r\n\r\n    /**\r\n     * 根据唯一键值从对象池中获取对应节点\r\n     * @param Node \r\n     * @param key \r\n     * @returns \r\n     */\r\n    public getNodeItemById(Node: Node, key: string) {\r\n        let node = null;\r\n        if (this._dictPool.hasOwnProperty(key)) {\r\n            //已有对应的对象池\r\n            let pool = this._dictPool[key];\r\n            if (pool.size() > 0) {\r\n                node = pool.get();\r\n            } else {\r\n                node = instantiate(Node);\r\n            }\r\n        } else {\r\n            //没有对应对象池，创建他！\r\n            let pool = new NodePool();\r\n            this._dictPool[key] = pool;\r\n            node = instantiate(Node);\r\n        }\r\n        node.setPosition(10000, 100000);\r\n        node.active = true;\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * 将对应节点放回对象池中\r\n     * @param node \r\n     * @param key \r\n     * @returns \r\n     */\r\n    public putNodeByKey(node: Node, key: string) {\r\n        let pool = new NodePool();\r\n        if (this._dictPool.hasOwnProperty(key)) {\r\n            //已有对应的对象池\r\n            pool = this._dictPool[key];\r\n        } else {\r\n            //没有对应对象池，创建他！\r\n            this._dictPool[key] = pool;\r\n        }\r\n        // this.resertStreak(node);\r\n        node.active = false;\r\n        pool.put(node);\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取对象池预制体个数\r\n     * @param prefab \r\n     */\r\n    getPoolSizeByPrefab(prefab: Prefab) {\r\n        let num = 0;\r\n        let name = prefab.name;\r\n        //@ts-ignore\r\n        if (!prefab.position) {\r\n            //@ts-ignore\r\n            name = prefab.data.name;\r\n        }\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            //已有对应的对象池\r\n            let pool = this._dictPool[name];\r\n            num = pool.size();\r\n\r\n        }\r\n        return num;\r\n    }\r\n\r\n    /**\r\n    * 将对应节点放回对象池中\r\n    */\r\n    public putPool(node: Node) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        let name = node.name;\r\n        let pool = null;\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            //已有对应的对象池\r\n            pool = this._dictPool[name];\r\n        } else {\r\n            //没有对应对象池，创建他！\r\n            pool = new NodePool();\r\n            this._dictPool[name] = pool;\r\n        }\r\n        // this.resertStreak(node);\r\n        node.active = false;\r\n        pool.put(node);\r\n    }\r\n\r\n    /**\r\n     * 将对应节点放回对象池中\r\n     */\r\n    public putNode(node: Node) {\r\n        if (!node) {\r\n            return;\r\n        }\r\n        let name = node.name;\r\n        let pool = new NodePool();\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            //已有对应的对象池\r\n            pool = this._dictPool[name];\r\n        } else {\r\n            //没有对应对象池，创建他！\r\n            this._dictPool[name] = pool;\r\n        }\r\n        // this.resertStreak(node);\r\n        node.active = false;\r\n        pool.put(node);\r\n    }\r\n\r\n    /**\r\n     * 根据名称，清除对应对象池\r\n     */\r\n    public clearPool(name: string) {\r\n        if (this._dictPool.hasOwnProperty(name)) {\r\n            let pool = this._dictPool[name];\r\n            pool.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清理对象池\r\n     */\r\n    public clear() {\r\n        for (let key in this._dictPool) {\r\n            if (this._dictPool.hasOwnProperty(key)) {\r\n                let pool = this._dictPool[key];\r\n                pool.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 预生成对象池\r\n     * @param prefab \r\n     * @param nodeNum \r\n     */\r\n    public prePool(prefab: Prefab, nodeNum: number) {\r\n        const name = prefab.data.name;\r\n\r\n        let pool = new NodePool();\r\n        this._dictPool[name] = pool;\r\n\r\n        for (let i = 0; i < nodeNum; i++) {\r\n            const node = instantiate(prefab);\r\n            pool.put(node);\r\n        }\r\n    }\r\n}\r\n"]}