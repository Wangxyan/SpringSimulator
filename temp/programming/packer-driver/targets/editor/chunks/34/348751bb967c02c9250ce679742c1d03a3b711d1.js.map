{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Game/Hero/HeroBase.ts"],"names":["_decorator","color","Node","Prefab","sp","tween","Vec3","BaseComponent","EventListener","GameEvent","HeroAnim","HeroData","SkillBulletObj","SkillData","MonsterData","AudioManager","ccclass","property","HeroBase","Skeleton","_firePos","isCollider","heroKey","releaseSkillStatus","_showHitTotalTime","initBorn","emit","SHOW_HERO_HP","node","getPosition","instance","heroSpine","setAnimation","IDLE","insertRectCircleObj","getFirePos","pos","firePos","x","y","updateSkillDamageInterval","INSERT_HERO_CIRCLE_OBJ","onAttacked","atk","playHit","curHp","UPDATE_HERO_HP","comObj","tmpColor","to","onUpdate","target","ratio","call","start","releaseSkill","releaseSkillObj","getQueueSkill","playSound","unschedule","initHeroAnim","ATK","scheduleOnce","skillBulletObj","skillKey","skillCfg","getUpgradeSkillBySkillId","targetPos","interval","releaseTimes","Salvo","targetCount","i","targetPosArr","getNearMonster","length","bulletCount","BulletCount","j","n","intervalAngle","IntervalAngle","angle","getSkillDirAngle","CREATE_SKILL_EFFECT","callback","animTime","addAnimation","onEnable","on","HERO_HURT","onDisable","off","childUpdate","dt"],"mappings":"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","sourcesContent":["import { _decorator, color, Component, instantiate, math, Node, Prefab, sp, tween, Vec3, AnimationComponent, Sprite } from 'cc';\r\nimport BaseComponent from '../../Frame/BaseComponent';\r\nimport { EventListener } from '../../Frame/EventListener';\r\nimport { GameEvent } from '../Event/GameEvent';\r\nimport { GridData } from '../Data/GridData';\r\nimport { SkillTypeItem } from '../Skill/SkillTypeItem';\r\nimport { HeroAnim, HeroData } from '../Data/HeroData';\r\nimport { WeaponData } from '../Data/WeaponData';\r\nimport { SkillBulletObj, SkillData } from '../Data/SkillData';\r\nimport { MonsterData } from '../Data/MonsterData';\r\nimport { AudioManager } from '../../Frame/AudioManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('HeroBase')\r\nexport class HeroBase extends BaseComponent {\r\n    @property(sp.Skeleton)\r\n    heroSpine: sp.Skeleton = null;\r\n    @property(Node)\r\n    skillTypeList: Node = null;\r\n    @property(Prefab)\r\n    skillTypePrefab: Prefab = null;\r\n    private _firePos: Vec3 = new Vec3(0, 70, 0);\r\n    public isCollider: boolean;//是否碰撞\r\n    public heroKey: string = '';//英雄唯一标识\r\n    public releaseSkillStatus: boolean = true;//释放技能状态\r\n    initBorn() {\r\n        EventListener.emit(GameEvent.SHOW_HERO_HP, this.node.getPosition());\r\n        this.heroKey = HeroData.instance.heroKey;\r\n        this.heroSpine.setAnimation(0, HeroAnim.IDLE, true);\r\n        this.insertRectCircleObj();\r\n    }\r\n\r\n    /* 获取技能释放点 */\r\n    getFirePos() {\r\n        let pos = this.node.getPosition();\r\n        let firePos = new Vec3(pos.x + this._firePos.x, pos.y + this._firePos.y, 0);\r\n        return firePos;\r\n    }\r\n\r\n    /**\r\n    * 更新间隔伤害时间\r\n    */\r\n    updateSkillDamageInterval() {\r\n\r\n    }\r\n\r\n    /**\r\n   * 添加圆形区域检测对象\r\n   * @param dt \r\n   */\r\n    insertRectCircleObj() {\r\n        EventListener.emit(GameEvent.INSERT_HERO_CIRCLE_OBJ, this.heroKey, this);\r\n    }\r\n\r\n\r\n    /* 受伤 */\r\n    onAttacked(atk: number) {\r\n        this.playHit();\r\n        HeroData.instance.curHp = atk;\r\n        EventListener.emit(GameEvent.UPDATE_HERO_HP);\r\n    }\r\n\r\n\r\n    _showHitTotalTime: number = 0.15\r\n    playHit() {\r\n        //占用alpha通道\r\n        let comObj = this.heroSpine;\r\n        comObj.color = color(255, 255, 255, 1)\r\n        let tmpColor: math.Color = color(255, 255, 255, 50)\r\n        tween(comObj).to(this._showHitTotalTime, {}, {\r\n            onUpdate(target: any, ratio) {\r\n                tmpColor = color(255, 255, 255, 50 * ratio)\r\n                target.color = tmpColor;\r\n            },\r\n        }).call(() => {\r\n            tmpColor = color(255, 255, 255, 255);\r\n            comObj.color = tmpColor\r\n        }).start()\r\n\r\n    }\r\n\r\n    /* 释放技能 */\r\n    releaseSkill() {\r\n        if (this.releaseSkillStatus) {\r\n            let releaseSkillObj = HeroData.instance.getQueueSkill();\r\n            if (releaseSkillObj) {\r\n                this.releaseSkillStatus = false;\r\n                AudioManager.instance.playSound(5);\r\n                this.unschedule(this.initHeroAnim);\r\n                this.heroSpine.setAnimation(0, HeroAnim.ATK, false);\r\n                this.scheduleOnce(() => {\r\n                    let skillBulletObj = new SkillBulletObj();\r\n                    skillBulletObj.skillKey = releaseSkillObj.skillKey;\r\n                    skillBulletObj.skillCfg = SkillData.instance.getUpgradeSkillBySkillId(releaseSkillObj.skillCfg);\r\n                    skillBulletObj.pos = this.getFirePos();\r\n                    skillBulletObj.targetPos = new Vec3(0, -200, 0);\r\n                    let interval = 0.1;\r\n                    let releaseTimes = skillBulletObj.skillCfg.Salvo;\r\n                    let targetCount = 1;\r\n                    //释放次数\r\n                    for (let i = 0; i < releaseTimes; i++) {\r\n                        let targetPosArr = MonsterData.instance.getNearMonster(skillBulletObj.skillKey);\r\n                        if (targetPosArr.length) {\r\n                            //子弹个数\r\n                            let bulletCount = skillBulletObj.skillCfg.BulletCount;\r\n                            for (let j = 0; j < bulletCount; j++) {\r\n                                //目标数量\r\n                                for (let n = 0; n < targetCount; n++) {\r\n                                    let intervalAngle = skillBulletObj.skillCfg.IntervalAngle;\r\n                                    let angle = SkillData.instance.getSkillDirAngle(j, intervalAngle);\r\n                                    if (n < targetPosArr.length) {\r\n                                        EventListener.emit(GameEvent.CREATE_SKILL_EFFECT, skillBulletObj, targetPosArr[n], angle, interval * i);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this.releaseSkillStatus = true;\r\n                    releaseSkillObj.callback && releaseSkillObj.callback();\r\n                    this.scheduleOnce(this.initHeroAnim, 1)\r\n                }, releaseSkillObj.animTime)\r\n            }\r\n        }\r\n    }\r\n\r\n    initHeroAnim() {\r\n        this.heroSpine.addAnimation(0, HeroAnim.IDLE, true);\r\n    }\r\n\r\n\r\n    protected onEnable(): void {\r\n        EventListener.on(GameEvent.HERO_HURT, this.onAttacked, this);\r\n\r\n    }\r\n\r\n    protected onDisable(): void {\r\n        EventListener.off(GameEvent.HERO_HURT, this.onAttacked, this);\r\n    }\r\n\r\n    protected childUpdate(dt: number): void {\r\n\r\n    }\r\n}\r\n\r\n\r\n"]}