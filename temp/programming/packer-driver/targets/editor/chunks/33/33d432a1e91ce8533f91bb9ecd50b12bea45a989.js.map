{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Game/Data/SkillData.ts"],"names":["SkillData","SkillBulletObj","ReleaseSkillObj","AtkObj","SkillUpgradeObj","Vec3","CfgMgr","Util","SkillCfg","SkillTargetCfg","MonsterData","_battleSkillUpgradeData","Map","getSkillCfgById","id","getDataById","upgradeSkillObjAtt","skillUpgradeCfg","aim_skill","i","length","skillId","skillUpgradeObj","has","get","Hp","hp_up","Exp","exp_up","Gold","gold_up","CdPer","cd_shorten","DamageRange","damageRange_up","DamageNum","damageNum_up","Damage","damage_up","Range","range_up","Speed","speed_up","Salvo","salvo_up","BulletCount","intensity_up","set","getUpgradeSkillBySkillId","skillCfg","skillCfgTem","clone","Id","upgradeObj","key","Object","prototype","hasOwnProperty","call","element","getSkillTargetId","targetIdArr","index","getSkillBulletCount","targetId","targetCfg","random","randomArr","split","Number","getSkillDirAngle","intervalAngle","angle","Math","ceil","getSkillAtkTargetPos","curPos","skillKey","posArr","targetType","type","poolCount","targetCount","getHeroNearTargetPos","getMonsterHpTargetPos","getScreenTargetPos","getSelfTargetPos","getRandPos","status","heroKey","monsterNodeMap","instance","getNearMonsterTarget","data","checkArr","size","forEach","item","len","getColliderPos","x","push","monsterBase","distance","sort","a","b","slice","floor","e","curhp","curHp","hp","Array","from","values","targetPos","y","checkColliderTriggleSkill","trigger","count","damageTimes","check","clear","_instance","layer","pos","callback","param","scale","animTime","releaseTimes","bulletCount","atk"],"mappings":"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","sourcesContent":["import { Vec3 } from \"cc\";\r\nimport { CfgMgr } from \"../../Frame/CfgMgr\";\r\nimport { Util } from \"../../Frame/Util\";\r\nimport { SkillCfg } from \"../../Model/SkillModel\";\r\nimport { SkillTargetCfg } from \"../../Model/SkillTargetModel\";\r\nimport { SkillUpgradeCfg } from \"../../Model/SkillUpgradeMode\";\r\nimport { MonsterBase } from \"../Monster/MonsterBase\";\r\nimport { MonsterData } from \"./MonsterData\";\r\n\r\nexport class SkillData {\r\n    private _battleSkillUpgradeData: Map<number, SkillUpgradeObj> = new Map();//战斗内外的技能升级提升(针对技能的提升)  key=>skillId\r\n\r\n    getSkillCfgById(id: number) {\r\n        return CfgMgr.getDataById<SkillCfg>(new SkillCfg(), id);\r\n    }\r\n\r\n\r\n    /**\r\n   * 提升技能属性\r\n   * @param skillId \r\n   * @param skillUpgradeCfg \r\n   */\r\n    upgradeSkillObjAtt(skillUpgradeCfg: SkillUpgradeCfg) {\r\n        //aim_skill   0:针对所有\r\n\r\n        let aim_skill = skillUpgradeCfg.aim_skill;\r\n        if (aim_skill) {\r\n            for (let i = 0; i < aim_skill.length; i++) {\r\n                const skillId = aim_skill[i];\r\n                let skillUpgradeObj = this._battleSkillUpgradeData.has(skillId) ? this._battleSkillUpgradeData.get(skillId) : new SkillUpgradeObj();\r\n                skillUpgradeObj.skillId = skillId;\r\n                skillUpgradeObj.Hp += skillUpgradeCfg.hp_up;\r\n                skillUpgradeObj.Exp += skillUpgradeCfg.exp_up;\r\n                skillUpgradeObj.Gold += skillUpgradeCfg.gold_up;\r\n                skillUpgradeObj.CdPer += skillUpgradeCfg.cd_shorten;\r\n                skillUpgradeObj.DamageRange += skillUpgradeCfg.damageRange_up;\r\n                skillUpgradeObj.DamageNum += skillUpgradeCfg.damageNum_up;\r\n                skillUpgradeObj.Damage += skillUpgradeCfg.damage_up;\r\n                skillUpgradeObj.Range += skillUpgradeCfg.range_up;\r\n                skillUpgradeObj.Speed += skillUpgradeCfg.speed_up;\r\n                skillUpgradeObj.Salvo += skillUpgradeCfg.salvo_up;\r\n                skillUpgradeObj.BulletCount += skillUpgradeCfg.intensity_up;\r\n                if (!this._battleSkillUpgradeData.has(skillId)) {\r\n                    this._battleSkillUpgradeData.set(skillId, skillUpgradeObj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /* 获取升级技能 */\r\n    getUpgradeSkillBySkillId(skillCfg: SkillCfg) {\r\n        let skillCfgTem: SkillCfg = Util.clone(skillCfg);\r\n        if (this._battleSkillUpgradeData.has(skillCfgTem.Id)) {\r\n            let upgradeObj = this._battleSkillUpgradeData.get(skillCfgTem.Id);\r\n            for (const key in upgradeObj) {\r\n                if (Object.prototype.hasOwnProperty.call(upgradeObj, key)) {\r\n                    const element = upgradeObj[key];\r\n                    if (skillCfgTem.hasOwnProperty(key)) {\r\n                        skillCfgTem[key] += element;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //TODO  加上针对所有技能id 0\r\n        return skillCfgTem;\r\n    }\r\n\r\n    /**\r\n  * 获取技能目标id\r\n  * @param targetIdArr \r\n  */\r\n    getSkillTargetId(targetIdArr: Array<number>, index: number) {\r\n        if (targetIdArr.length) {\r\n            return index < targetIdArr.length ? targetIdArr[index] : targetIdArr[targetIdArr.length - 1];\r\n        }\r\n        return 0\r\n    }\r\n\r\n    /**\r\n     * 获取每次释放的子弹数量\r\n     */\r\n    getSkillBulletCount(targetId: number) {\r\n        if (targetId) {\r\n            let targetCfg = CfgMgr.getDataById<SkillTargetCfg>(new SkillTargetCfg(), targetId);\r\n            if (targetCfg.random) {\r\n                let randomArr = targetCfg.random.split(':');\r\n                return Number(randomArr[1]);\r\n            }\r\n            return 1;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * 获取偏移角度\r\n     * @param index 子弹索引\r\n     * @param intervalAngle 间隔角度\r\n     */\r\n    getSkillDirAngle(index: number, intervalAngle: number) {\r\n        let angle = 0;\r\n        if (index) {\r\n            if (index % 2 == 0) {\r\n                angle = index / 2 * intervalAngle;\r\n            }\r\n            else {\r\n                angle = -Math.ceil(index / 2) * intervalAngle;\r\n            }\r\n        }\r\n        return angle;\r\n    }\r\n\r\n    /**\r\n     * 获取技能攻击目标坐标\r\n     * @param targetId \r\n     */\r\n    getSkillAtkTargetPos(targetId: number, curPos: Vec3, skillKey: string) {\r\n        let posArr = [];\r\n        if (targetId) {\r\n            let targetCfg = CfgMgr.getDataById<SkillTargetCfg>(new SkillTargetCfg(), targetId);\r\n            let targetType = targetCfg.type;\r\n            let random = targetCfg.random;\r\n            let randomArr = random.split(':');\r\n            let poolCount = Number(randomArr[0]);\r\n            let targetCount = Number(randomArr[1]);\r\n            if (targetType.length) {\r\n                switch (targetType[0]) {\r\n                    case 1:\r\n                        //英雄最近\r\n                        posArr = this.getHeroNearTargetPos(true, poolCount, targetCount, skillKey, curPos);\r\n                        break;\r\n                    case 2:\r\n                        //英雄最近\r\n                        posArr = this.getHeroNearTargetPos(true, poolCount, targetCount, skillKey, curPos);\r\n                        break;\r\n                    case 3:\r\n                        //最大血量\r\n                        posArr = this.getMonsterHpTargetPos(true, poolCount, targetCount, skillKey, curPos);\r\n                        break;\r\n                    case 4:\r\n                        //最小血量\r\n                        posArr = this.getMonsterHpTargetPos(true, poolCount, targetCount, skillKey, curPos);\r\n                        break;\r\n                    case 7:\r\n                        //屏幕内随机\r\n                        posArr = this.getScreenTargetPos(poolCount, targetCount, skillKey);\r\n                        break;\r\n                    case 8:\r\n                        //离自身最近\r\n                        posArr = this.getSelfTargetPos(true, poolCount, targetCount, skillKey, curPos);\r\n                        break;\r\n                    case 9:\r\n                        //离自身最远\r\n                        posArr = this.getSelfTargetPos(true, poolCount, targetCount, skillKey, curPos);\r\n                        break;\r\n                    default:\r\n                        posArr = this.getScreenTargetPos(poolCount, targetCount, skillKey);\r\n                        break;\r\n                }\r\n            }\r\n            //为空则随机\r\n            posArr = posArr.length ? posArr : this.getRandPos(curPos, targetCount);\r\n        }\r\n        else {\r\n            posArr = [curPos];\r\n        }\r\n        return posArr;\r\n    }\r\n\r\n    /**\r\n     * 获取英雄近远目标\r\n     * @param status   ture:最近  false：最远\r\n     * @param randomStr 随机参数\r\n     */\r\n    getHeroNearTargetPos(status: boolean, poolCount: number, targetCount: number, heroKey: string, curPos?: Vec3) {\r\n        let posArr = [];\r\n        let monsterNodeMap = MonsterData.instance.getNearMonsterTarget(heroKey);\r\n        let data = [];\r\n        let checkArr = [];\r\n        if (monsterNodeMap.size) {\r\n            monsterNodeMap.forEach((item: MonsterBase) => {\r\n                //垂直距离\r\n                let len = item.getColliderPos().x;\r\n                data.push({ monsterBase: item, distance: len })\r\n            })\r\n            data.sort((a, b) => {\r\n                return status ? a.distance - b.distance : b.distance - a.distance;\r\n            })\r\n            poolCount = poolCount >= data.length ? data.length : poolCount;\r\n            checkArr = data.slice(0, poolCount);\r\n            if (checkArr.length) {\r\n                for (let i = 0; i < targetCount; i++) {\r\n                    let index = i < checkArr.length ? Math.floor(Math.random() * checkArr.length) : 0;\r\n                    let e = checkArr[index];\r\n                    posArr.push(e.monsterBase.getColliderPos());\r\n                }\r\n            }\r\n        }\r\n        return posArr;\r\n    }\r\n\r\n    /**\r\n     * 获取血量高低目标\r\n     * @param status ture:高  false：低\r\n     * @param randomStr 随机参数\r\n     */\r\n    getMonsterHpTargetPos(status: boolean, poolCount: number, targetCount: number, heroKey: string, curPos: Vec3) {\r\n        let posArr = [];\r\n        let monsterNodeMap = MonsterData.instance.getNearMonsterTarget(heroKey);\r\n        let data = [];\r\n        let checkArr = [];\r\n        if (monsterNodeMap.size) {\r\n            monsterNodeMap.forEach((item: MonsterBase) => {\r\n                let curhp = item.curHp;\r\n                data.push({ monsterBase: item, hp: curhp })\r\n            })\r\n            data.sort((a, b) => {\r\n                return !status ? a.hp - b.hp : b.hp - a.hp;\r\n            })\r\n            poolCount = poolCount >= data.length ? data.length : poolCount;\r\n            checkArr = data.slice(0, poolCount);\r\n            if (checkArr.length) {\r\n                for (let i = 0; i < targetCount; i++) {\r\n                    let index = i < checkArr.length ? Math.floor(Math.random() * checkArr.length) : 0;\r\n                    let e = checkArr[index];\r\n                    posArr.push(e.monsterBase.getColliderPos());\r\n                }\r\n            }\r\n        }\r\n        return posArr;\r\n    }\r\n\r\n    /**\r\n     * 获取屏幕内随机目标\r\n     * @param randomStr \r\n     */\r\n    getScreenTargetPos(poolCount: number, targetCount: number, heroKey: string) {\r\n        let posArr = [];\r\n        let monsterNodeMap = MonsterData.instance.getNearMonsterTarget(heroKey);\r\n        if (monsterNodeMap.size) {\r\n            let data = Array.from(monsterNodeMap.values());\r\n            for (let i = 0; i < targetCount; i++) {\r\n                let index = Math.floor(Math.random() * data.length);\r\n                posArr.push(data[index].getColliderPos());\r\n            }\r\n\r\n        }\r\n        return posArr\r\n    }\r\n\r\n    /**\r\n     * 获取自身近远目标\r\n     * @param status ture:近  false：远\r\n     * @param randomStr  随机参数\r\n     */\r\n    getSelfTargetPos(status: boolean, poolCount: number, targetCount: number, heroKey: string, curPos: Vec3) {\r\n        let posArr = [];\r\n        let monsterNodeMap = MonsterData.instance.getNearMonsterTarget(heroKey);\r\n        let data = [];\r\n        let checkArr = [];\r\n        if (monsterNodeMap.size) {\r\n            monsterNodeMap.forEach((item: MonsterBase) => {\r\n                //垂直距离\r\n                let len = Vec3.distance(item.getColliderPos(), curPos);\r\n                if (len > 50) {\r\n                    data.push({ monsterBase: item, distance: len })\r\n                }\r\n            })\r\n            data.sort((a, b) => {\r\n                return status ? a.distance - b.distance : b.distance - a.distance;\r\n            })\r\n            poolCount = poolCount >= data.length ? data.length : poolCount;\r\n            checkArr = data.slice(0, poolCount);\r\n            if (checkArr.length) {\r\n                for (let i = 0; i < targetCount; i++) {\r\n                    let index = i < checkArr.length ? Math.floor(Math.random() * checkArr.length) : 0;\r\n                    let e = checkArr[index];\r\n                    posArr.push(e.monsterBase.getColliderPos());\r\n                }\r\n            }\r\n        }\r\n        return posArr;\r\n    }\r\n\r\n    getRandPos(curPos: Vec3, targetCount: number) {\r\n        let posArr = [];\r\n        for (let i = 0; i < targetCount; i++) {\r\n            let targetPos = new Vec3();\r\n            targetPos.x = 0;\r\n            targetPos.y = (Math.random() - 0.5) * 2 * 200;\r\n            posArr.push(targetPos);\r\n        }\r\n        return posArr;\r\n    }\r\n\r\n    /**\r\n     * 检测碰撞触发技能 skillGroupType\r\n     *  1=碰撞之后首次触发\r\n        2=技能结束后触发\r\n        3=碰撞触发\r\n        4=闪电链击中触发\r\n        5=范围伤害碰撞后\r\n        6=技能释放或命中多少次触发\r\n        7=由城墙释放\r\n        8=持续技能触发，和持续技能一起释放一起结束\r\n        9=怪物死亡后触发\r\n        11=持续技能碰撞后触发\r\n     * @param trigger \r\n     */\r\n    checkColliderTriggleSkill(trigger: number, count: number, damageTimes: number) {\r\n        let check = false;\r\n        switch (trigger) {\r\n            case 1:\r\n                //碰撞之后首次触发\r\n                check = count == 1 ? true : false;\r\n                break;\r\n            case 2:\r\n                //技能结束后触发\r\n                check = count == damageTimes ? true : false;\r\n                break;\r\n            case 3:\r\n                //碰撞触发\r\n                check = true;\r\n                break;\r\n            default:\r\n                check = false;\r\n                break;\r\n\r\n        }\r\n        return check;\r\n    }\r\n\r\n\r\n    clear() {\r\n        this._battleSkillUpgradeData.clear();\r\n    }\r\n\r\n    private static _instance: SkillData = null;\r\n    public static get instance(): SkillData {\r\n        if (!this._instance) {\r\n            this._instance = new SkillData();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n}\r\n\r\n/* 技能子弹对象 */\r\nexport class SkillBulletObj {\r\n    skillKey: string;//技能唯一值\r\n    skillCfg: SkillCfg;//技能配置\r\n    layer: number = 1;//1:怪物上层 0：怪物下层\r\n    pos: Vec3;//技能初始位置\r\n    callback?: Function; //技能释放完回调\r\n    targetPos?: Vec3;//技能目标位置\r\n    param?: string;//技能参数\r\n    scale?: number = 1;//技能大小\r\n}\r\n\r\nexport class ReleaseSkillObj {\r\n    skillKey: string;//技能唯一值\r\n    skillCfg: SkillCfg;//技能配置\r\n    animTime: number = 0.2;\r\n    releaseTimes: number = 1;//释放次数\r\n    bulletCount: number = 1;//子弹数量\r\n    callback?: Function\r\n}\r\n\r\nexport class AtkObj {\r\n    atk: number = 0;//攻击力\r\n    type: number = 0;//攻击类型 0:默认  1:暴击\r\n}\r\n\r\n/* 技能提升对象  */\r\nexport class SkillUpgradeObj {\r\n    skillId: number = 0;//技能id\r\n    Hp: number = 0;\r\n    Exp: number = 0;\r\n    Gold: number = 0;\r\n    CdPer: number = 0;//技能cd百分比\r\n    DamageRange: number = 0;//伤害范围\r\n    DamageNum: number = 0;//伤害次数\r\n    Damage: number = 0;//伤害\r\n    Range: number = 0;//攻击范围\r\n    Speed: number = 0;//移动速度\r\n    Salvo: number = 0;//发射次数\r\n    BulletCount: number = 0;//子弹个数\r\n\r\n}\r\n"]}