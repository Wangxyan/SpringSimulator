{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Frame/Debug.ts"],"names":["Debug","Graphics","Node","GameDefine","log","params","DebugLevel","Promise","resolve","console","apply","info","warn","error","drawFillRect","node","rect","g","addComponent","fillColor","fromHEX","x","y","width","height","fill","drawRect","lineWidth","strokeColor","stroke","drawLine","clear","moveTo","lineTo","drawPolyGon","points","tempNode","addChild","i","length","p","close","drawBesize","startPos","targetPos","c1x","c1y","c2x","c2y","bezierCurveTo"],"mappings":"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","sourcesContent":["import { Graphics, Rect, Node, Vec2 } from \"cc\";\r\nimport { GameDefine } from \"../GameDefine\";\r\nexport class Debug {\r\n    static log(...params: any[]) {\r\n        if (GameDefine.DebugLevel <= 0) {\r\n            Promise.resolve(console.log.apply(this, params))\r\n        }\r\n    }\r\n\r\n    static info(...params: any[]) {\r\n        if (GameDefine.DebugLevel <= 1) {\r\n            Promise.resolve(console.info.apply(this, params))\r\n        }\r\n    }\r\n\r\n    static warn(...params: any[]) {\r\n        if (GameDefine.DebugLevel <= 2) {\r\n            Promise.resolve(console.warn.apply(this, params))\r\n        }\r\n    }\r\n\r\n    static error(...params: any[]) {\r\n        if (GameDefine.DebugLevel <= 3) {\r\n            Promise.resolve(console.error.apply(this, params))\r\n        }\r\n    }\r\n\r\n\r\n    public static drawFillRect(node: Node, rect: Rect): void {\r\n        let g = node.addComponent(Graphics);\r\n        g.fillColor.fromHEX('#ff0000');\r\n        g.rect(rect.x, rect.y, rect.width, rect.height);\r\n        g.fill();\r\n    }\r\n\r\n    public static drawRect(node: Node, rect: Rect): void {\r\n        let g = node.addComponent(Graphics);\r\n        g.lineWidth = 2;\r\n        g.strokeColor.fromHEX('#ff0000');\r\n        g.rect(rect.x, rect.y, rect.width, rect.height);\r\n        g.stroke();\r\n    }\r\n\r\n    public static drawLine(node: Node): void {\r\n        var g = node.addComponent(Graphics);\r\n        g.lineWidth = 2;\r\n        g.strokeColor.fromHEX('#ffffff');\r\n        g.clear();\r\n        g.moveTo(100, 100);\r\n        g.lineTo(100, 200);\r\n        g.lineTo(200, 200);\r\n        g.stroke();\r\n    }\r\n\r\n    public static drawPolyGon(node: Node, points: Vec2[]): void {\r\n        let tempNode = new Node();\r\n        node.addChild(tempNode);\r\n        let g = tempNode.addComponent(Graphics);\r\n        g.lineWidth = 10;\r\n        g.strokeColor.fromHEX(\"#ffffff\")\r\n        for (let i = 0; i < points.length; i++) {\r\n            let p = points[i];\r\n            if (i == 0) {\r\n                g.moveTo(p.x, p.y);\r\n            } else {\r\n                g.lineTo(p.x, p.y);\r\n            }\r\n        }\r\n        g.close();\r\n        g.stroke();\r\n    }\r\n\r\n    public static drawBesize(node, startPos: Vec2, targetPos: Vec2, c1x: number, c1y: number, c2x: number, c2y: number) {\r\n        let tempNode = new Node();\r\n        node.addChild(tempNode);\r\n        let g = tempNode.addComponent(Graphics);\r\n        g.lineWidth = 10;\r\n        g.strokeColor.fromHEX(\"#ffffff\");\r\n        g.moveTo(startPos.x, startPos.y);\r\n        g.bezierCurveTo(c1x, c1y, c2x, c2y, targetPos.x, targetPos.y);\r\n        g.stroke();\r\n    };\r\n}"]}