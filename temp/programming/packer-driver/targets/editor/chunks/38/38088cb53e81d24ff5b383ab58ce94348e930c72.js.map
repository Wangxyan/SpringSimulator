{"version":3,"sources":["file:///D:/CODE/cocos_workspace/%E8%83%8C%E5%8C%85%E8%8B%B1%E9%9B%84/assets/Scripts/Frame/AudioManager.ts"],"names":["AudioManager","Node","AudioClip","AudioSource","director","assetManager","Button","Toggle","ResourcesUtil","CfgMgr","SoundCfg","Configuration","Constants","dictWeaponSoundIndex","mainVolume","_musicVolume","_soundVolume","_musicSwitch","_soundSwitch","_mapSound","Map","_mapMusic","_persistRootNode","_musicSource","_curSounds","instance","_instance","musicSource","musicVolume","v","_setCurMusicVolume","soundVolume","_setCurSoundVolume","init","getScene","addChild","addPersistRootNode","SetButtonSound","getAudioSetting","prototype","event","interactable","enabledInHierarchy","playSound","touchBeganClone","value","values","volume","forEach","source","isMusic","state","getConfigData","_getAudioSource","clip","result","sounds","name","length","pop","set","addComponent","currentTime","playMusic","id","loop","cb","audioCfg","_geAudioNameById","Mp3","path","AUDIO_FILE_PATH","MUSIC","stop","get","_getExistMusicSource","loadResNew","Volume","playOnAwake","play","i","components","com","console","log","Id","soundCfg","getDataById","SOUND","push","setTimeout","indexOf","splice","duration","isSoundPlaying","some","isMusicExist","isMusicPlaying","playing","preLoadMusics","musics","switchMusic","open","resumeMusic","stopMusic","setConfigData","switchSound","resumeSound","pauseSound","stopAllAudio","pause","stopAllMusic","destroyMusic","has","delete","destroy","stopAllSound","audio","idx","stopSoundArr","arr","stopMusicArr","resumeAll","AudioState","PAUSED","removeMusic","audioSource","releaseAsset","removeSound","arrAudioSource","setMusic","flag","setMusicWithoutSave","setSound"],"mappings":"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","sourcesContent":["import { _decorator, Node, AudioClip, AudioSource, game, director, assetManager, Button, Toggle } from \"cc\";\nimport { ResourcesUtil } from \"./ResourcesUtil\";\nimport { CfgMgr } from \"./CfgMgr\";\nimport { Debug } from \"./Debug\";\nimport { SoundCfg } from \"../Model/SoundModel\";\nimport { Configuration } from \"./Configuration\";\nimport { Constants } from \"../Constants\";\n\nexport class AudioManager {\n    public dictWeaponSoundIndex: any = {};\n    public mainVolume: number = 1;      // 主音量\n\n    public static get instance() {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new AudioManager();\n        return this._instance;\n    }\n\n    public get musicSource(): AudioSource {\n        return this._musicSource;\n    }\n\n    public get musicVolume(): number {\n        return this._musicVolume * this._musicSwitch;;\n    }\n\n    public set musicVolume(v: number) {\n        this._musicVolume = v;\n        this._setCurMusicVolume();\n    }\n\n    public get soundVolume(): number {\n        return this._soundVolume * this._soundSwitch;\n    }\n\n    public set soundVolume(v: number) {\n        this._soundVolume = v;\n        this._setCurSoundVolume();\n    }\n\n    private _musicVolume: number = 1;//背景音乐音量\n    private _soundVolume: number = 1;//音效音量\n    private _musicSwitch: number = 1;//音乐开关\n    private _soundSwitch: number = 1;//音效开关\n    private _mapSound: Map<string, Array<AudioSource>> = new Map;//所有的音效\n    private _mapMusic: Map<string, AudioSource> = new Map;//所有的音乐\n    private _persistRootNode: Node = null!;\n    private _musicSource: AudioSource = null!;\n    private _curSounds: Array<AudioSource> = [];\n\n    private static _instance: AudioManager;\n\n    /**\n     * 初始化\n     * @returns \n     */\n    public init() {\n        if (this._persistRootNode) return; //避免切换场景初始化报错\n        this._persistRootNode = new Node('audio');\n        director.getScene()!.addChild(this._persistRootNode);\n        director.addPersistRootNode(this._persistRootNode);\n        this.SetButtonSound();\n        this._musicSwitch = this.getAudioSetting(true) ? 1 : 0;\n        this._soundSwitch = this.getAudioSetting(false) ? 1 : 0;\n\n        this.soundVolume = 1;\n        this.musicVolume = 1;\n    }\n\n\n    /* 播放通用按钮声音 */\n    public SetButtonSound(): void {\n        if (Button.prototype[\"touchBeganClone\"]) return;\n\n        Button.prototype[\"touchBeganClone\"] = Button.prototype[\"_onTouchEnded\"];\n\n        Button.prototype[\"_onTouchEnded\"] = function (event) {\n\n            if (this.interactable && this.enabledInHierarchy) {\n                // 播放自己的按钮音效\n                // AudioManager.instance.playSound(Constants.audioSource.CommonClick);\n                if (this instanceof Toggle) {\n                    // 播放自己的按钮音效\n                    AudioManager.instance.playSound(3);\n\n                }\n                else {\n                    // 播放自己的按钮音效\n                    AudioManager.instance.playSound(3);\n                }\n            }\n\n            this.touchBeganClone(event);\n\n        }\n    }\n\n\n    /**\n     * 设置当前音乐音量\n     */\n    private _setCurMusicVolume() {\n        //@ts-ignore\n        for (const value of this._mapMusic.values()) {\n            value.volume = this.musicVolume;\n        }\n    }\n\n    /**\n     * 设置当前音效音量\n     */\n    private _setCurSoundVolume() {\n        //@ts-ignore\n        for (const value of this._mapSound.values()) {\n            value.forEach((source: AudioSource) => {\n                source.volume = this.soundVolume;\n            })\n        }\n    }\n\n    /**\n       * 获取音频设置\n       * @param isMusic \n       * @returns \n       */\n    public getAudioSetting(isMusic: boolean) {\n        let state;\n        if (isMusic) {\n            state = Configuration.instance.getConfigData('music');\n        } else {\n            state = Configuration.instance.getConfigData('sound');\n        }\n        return !state || state === 'true' ? true : false;\n    }\n\n    /**\n    * 获取音效\n    * @param clip \n    * @returns \n    */\n    private _getAudioSource(clip: AudioClip) {\n        let result: AudioSource | undefined;\n\n        this._mapSound.forEach((sounds, name) => {\n            if (clip.name == name) {\n                if (sounds.length > 0) {\n                    const source = sounds.pop();\n                    result = source;\n                    this._mapSound.set(name, sounds);\n                }\n                return;\n            }\n        })\n\n        if (!result) {\n            result = this._persistRootNode.addComponent(AudioSource);\n        }\n\n        result.clip = clip;\n        result.currentTime = 0;\n        return result;\n    }\n\n    /**\n    * 播放音乐\n    * @param {number} Id id 音乐名称可通过 配置id获取\n    * @param {Boolean} loop 是否循环播放\n    * @param {Function} cb 播放开始时回调\n    */\n    public async playMusic(id: number, loop: boolean, cb?: Function) {\n        let audioCfg = this._geAudioNameById(id);\n        if (!audioCfg) {\n            return;\n        }\n        let name = audioCfg.Mp3;\n        let path = Constants.AUDIO_FILE_PATH.MUSIC + name;\n        let source = this._musicSource;\n        source && source.stop();\n\n        if (source && source.clip!.name == name) {\n        } else if (this._mapMusic.get(name)) {\n            //先把之前的那个背景音乐存起来\n            if (source && !this._mapMusic.get(source.clip!.name)) {\n                this._mapMusic.set(source.clip!.name, source)\n            }\n            //原来已经创建的就从里面取\n            source = this._mapMusic.get(name)!;\n        } else {\n            //如果已经有这个组件了就不用再添加了\n            let musicSource = this._getExistMusicSource(name);\n            if (!musicSource) {\n                let clip = await ResourcesUtil.loadResNew(path, AudioClip) as AudioClip;\n                //防止网速慢情况下，同时调用多次playMusic,导致短时间多个await\n                musicSource = this._getExistMusicSource(name);\n                if (!musicSource) {\n                    musicSource = this._persistRootNode.addComponent(AudioSource);\n                    musicSource.clip = clip;\n                    this._mapMusic.set(name, musicSource);\n                }\n            }\n\n            source = musicSource;\n        }\n\n        source.currentTime = 0;\n        source.volume = audioCfg.Volume * this.musicVolume;\n        source.loop = loop;\n        source.playOnAwake = false;\n\n        this._musicSource = source;\n        if (this._musicSwitch) {\n            source.play();\n        }\n        cb && cb();\n    }\n\n    /**\n     * 获取audio节点下已经存在的同名称AudioSource组件\n     *\n     * @private\n     * @param {string} name\n     * @return {*} \n     * @memberof AudioManager\n     */\n    private _getExistMusicSource(name: string) {\n        for (let i = this._persistRootNode.components.length - 1; i >= 0; i--) {\n            let com = this._persistRootNode.components[i];\n            if (com instanceof AudioSource && com.clip!.name == name) {\n                console.log(\"###已经有这个音乐组件了\", name);\n                return com;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n    * 获取音效配置\n    */\n    private _geAudioNameById(Id: number) {\n        let soundCfg = CfgMgr.getDataById<SoundCfg>(new SoundCfg(), Id);\n        return soundCfg;\n    }\n\n    /**\n     * 播放音效\n     * @param {number} id 音效名称可通过 配置id获取\n     * @param {Boolean} loop 是否循环播放\n     */\n    public async playSound(id: number, loop: boolean = false, cb?: Function) {\n        let audioCfg = this._geAudioNameById(id);\n        if (!audioCfg) {\n            return;\n        }\n        let name = audioCfg.Mp3;\n        let path = Constants.AUDIO_FILE_PATH.SOUND + name;\n\n        const clip = await ResourcesUtil.loadResNew(path, AudioClip) as AudioClip;\n        let source = this._getAudioSource(clip);\n\n        source.volume = audioCfg.Volume * this.soundVolume;\n        source.loop = loop;\n        source.playOnAwake = false;\n\n        this._curSounds.push(source);\n        if (this._soundSwitch) {\n            source.play();\n            setTimeout(() => {\n                if (this._curSounds.indexOf(source) >= 0) {\n                    this._curSounds.splice(this._curSounds.indexOf(source), 1);\n                }\n\n                if (!this._mapSound.get(name)) {\n                    this._mapSound.set(name, [source]);\n                } else {\n                    const sounds = this._mapSound.get(name)!;\n                    sounds.push(source);\n                    this._mapSound.set(name, sounds);\n                }\n\n                cb?.();\n            }, source.duration * 1000);\n        }\n    }\n\n    /**\n     * 当前是否正在播放指定音效\n     *\n     * @param {string} name\n     * @return {*} \n     * @memberof AudioManager\n     */\n    public isSoundPlaying(name: string) {\n        return this._curSounds.some((source: AudioSource) => {\n            return source.clip?.name == name;\n        })\n    }\n\n    /**\n     * 是否存在指定音乐\n     *\n     * @param {string} name\n     * @return {*} \n     * @memberof AudioManager\n     */\n    public isMusicExist(name: string) {\n        return this._mapMusic.get(name) != null;\n    }\n\n    /**\n     * 指定背景音乐是否正在播放\n     *\n     * @param {string} name\n     * @return {*} \n     * @memberof AudioManager\n     */\n    public isMusicPlaying(name: string) {\n        return this._musicSource && this._musicSource.clip!.name == name && this._musicSource.playing;\n    }\n\n    /**\n     * 预加载音乐\n     * @param musics \n     */\n    public async preLoadMusics(musics: Array<number>) {\n        for (let i = 0; i < musics.length; i++) {\n            const id = musics[i];\n            let audioCfg = this._geAudioNameById(id);\n            if (!audioCfg) {\n                continue;\n            }\n            let name = audioCfg.Mp3;\n            let path = Constants.AUDIO_FILE_PATH.MUSIC + name;\n            const clip = await ResourcesUtil.loadResNew(path, AudioClip)\n            if (clip) {\n                const musicSource = this._persistRootNode.addComponent(AudioSource);\n                musicSource.clip = clip as AudioClip;\n                this._mapMusic.set(name, musicSource);\n            }\n        }\n    }\n\n    /**\n     * 开关音乐\n     * @param open \n     */\n    public switchMusic(open: boolean) {\n        if (open) {\n            this.resumeMusic();\n        } else {\n            this.stopMusic();\n        }\n        Configuration.instance.setConfigData('music', `${open}`);\n    }\n\n    /**\n     * 开关音效\n     * @param open \n     */\n    public switchSound(open: boolean) {\n        if (open) {\n            this.resumeSound();\n        } else {\n            this.pauseSound();\n        }\n        Configuration.instance.setConfigData('sound', `${open}`);\n    }\n\n    /**\n     * 暂停所有音频播放\n     */\n    public stopAllAudio() {\n        this.stopMusic();\n        this.pauseSound();\n    }\n\n    /**\n     * 暂停当前音乐\n     */\n    public stopMusic() {\n        this._musicSwitch = 0;\n        this._musicSource && this._musicSource.pause();\n    }\n\n    /**\n     * 停止所有正在播放的背景音乐（一般只会有一个正在播放的背景音乐）\n     *\n     * @memberof AudioManager\n     */\n    public stopAllMusic() {\n        //@ts-ignore\n        for (const value of this._mapMusic.values()) {\n            if (value && value.playing) {\n                value.stop();\n            }\n        }\n    }\n\n    /**\n     * 删除当前背景音乐\n     */\n    public destroyMusic() {\n        if (this._musicSource.clip) {\n            if (this._mapMusic.has(this._musicSource.clip.name)) {\n                this._mapMusic.delete(this._musicSource.clip.name);\n            }\n            if (this._musicSource) {\n                this._musicSource.destroy();\n                this._musicSource = null!;\n            }\n        }\n    }\n\n    /**\n     * 暂停音效\n     */\n    public pauseSound() {\n        this._soundSwitch = 0;\n        this._curSounds.forEach((source: AudioSource) => {\n            if (source.playing) {\n                source.pause();\n            }\n        })\n    }\n\n    /**\n     * 停止播放当前所有正在播放的音效\n     *\n     * @memberof AudioManager\n     */\n    public stopAllSound() {\n        //@ts-ignore\n        for (const value of this._mapSound.values()) {\n            if (value && value.length) {\n                value.forEach((audio: AudioSource) => {\n                    if (audio && audio.playing) {\n                        audio.stop();\n                    }\n                })\n            }\n        }\n\n        for (let idx = 0; idx < this._curSounds.length; idx++) {\n            let audio = this._curSounds[idx];\n            if (audio && audio.playing) {\n                audio.stop();\n            }\n        }\n    }\n\n    /**\n     * 停止播放当前在arr里面的所有音效\n     *\n     * @param {Array<string>} arr\n     * @memberof AudioManager\n     */\n    public stopSoundArr(arr: Array<string>) {\n        //@ts-ignore\n        for (const value of this._mapSound.values()) {\n            if (value && value.length) {\n                value.forEach((audio: AudioSource) => {\n                    if (audio && audio.playing && arr.indexOf(audio.clip!.name) != -1) {\n                        audio.stop();\n                    }\n                })\n            }\n        }\n\n        for (let idx = 0; idx < this._curSounds.length; idx++) {\n            let audio = this._curSounds[idx];\n            if (audio && audio.playing && arr.indexOf(audio.clip!.name) != -1) {\n                audio.stop();\n            }\n        }\n    }\n\n    /**\n     * 停止播放当前在arr里面的所有音乐（一般只会有一个正在播放的背景音乐）\n     *\n     * @param {Array<string>} arr\n     * @memberof AudioManager\n     */\n    public stopMusicArr(arr: Array<string>) {\n        //@ts-ignore\n        for (let value of this._mapMusic.values()) {\n            if (value && value.playing && arr.indexOf(value.clip!.name) != -1) {\n                value.stop();\n            }\n        }\n    }\n\n    /**\n      * 继续播放所有音效和音乐\n      */\n    public resumeAll() {\n        this.resumeMusic();\n        this.resumeSound();\n    }\n\n    /**\n     * 恢复音乐\n     */\n    public resumeMusic() {\n        this._musicSwitch = 1;\n        if (this._musicSource) {\n            this._musicSource.volume = this.musicVolume;\n            this._musicSource.play();\n        }\n    }\n\n    /**\n     * 恢复音效\n     */\n    public resumeSound() {\n        this._soundSwitch = 1;\n\n        this._curSounds.forEach((source: AudioSource) => {\n            if (source.state == AudioSource.AudioState.PAUSED) {\n                source.volume = this.soundVolume;\n                source.play();\n            }\n        })\n    }\n\n    /**\n     * 移除不需要的音乐\n     * @param musics \n     */\n    public removeMusic(musics: Array<string>) {\n        for (let i = 0; i < musics.length; i++) {\n            const name = musics[i];\n            const audioSource = this._mapMusic.get(name);\n            this._mapMusic.delete(name);\n            if (audioSource) {\n                //@ts-ignore\n                assetManager.releaseAsset(audioSource.clip);\n                audioSource.destroy();\n                //@ts-ignore\n                this._mapMusic[name] = null;\n            }\n        }\n    }\n\n    /**\n     * 移除不需要的音效\n     * @param sounds \n     */\n    public removeSound(sounds: Array<string>) {\n        for (let i = 0; i < sounds.length; i++) {\n            const name = sounds[i];\n            const arrAudioSource = this._mapSound.get(name);\n            if (arrAudioSource && arrAudioSource.length) {\n                this._mapSound.delete(name);\n                arrAudioSource.forEach((audioSource: any) => {\n                    assetManager.releaseAsset(audioSource.clip);\n                    audioSource.destroy();\n                })\n            }\n        }\n    }\n\n    /**\n     * 设置音乐音量\n     *\n     * @param {number} flag\n     * @memberof AudioManager\n     */\n    public setMusic(flag: number) {\n        this.musicVolume = flag;\n\n        //@ts-ignore\n        for (let value of this._mapMusic.values()) {\n            if (value) {\n                value.volume = this.musicVolume * this.mainVolume;\n            }\n        }\n    }\n\n    /**\n     * 设置音乐音量但是不用保存\n     *\n     * @param {number} flag\n     * @memberof AudioManager\n     */\n    public setMusicWithoutSave(flag: number) {\n        //@ts-ignore\n        for (let value of this._mapMusic.values()) {\n            if (value) {\n                value.volume = flag * this.mainVolume;\n            }\n        }\n    }\n\n    public setSound(flag: number) {\n        this.soundVolume = flag;\n\n        //@ts-ignore\n        for (const value of this._mapSound.values()) {\n            if (value && value.length) {\n                value.forEach((audio: AudioSource) => {\n                    audio.volume = this.soundVolume * this.mainVolume;\n                })\n            }\n        }\n\n        for (let idx = 0; idx < this._curSounds.length; idx++) {\n            let audio = this._curSounds[idx];\n            audio.volume = this.soundVolume * this.mainVolume;\n        }\n    }\n}\n"]}