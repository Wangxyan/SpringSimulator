{
  "__type__": "cc.EffectAsset",
  "_name": "../Res/Shade/Effect/monsterEff",
  "_objFlags": 0,
  "__editorExtras__": {},
  "_native": "",
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true,
                "blendSrc": 2,
                "blendDst": 4,
                "blendDstAlpha": 4
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "program": "../Res/Shade/Effect/monsterEff|sprite-vs:vert|sprite-fs:frag",
          "depthStencilState": {
            "depthTest": false,
            "depthWrite": false
          },
          "properties": {
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "hitwhit": {
              "value": [
                0
              ],
              "type": 13
            },
            "noiceTx": {
              "value": "white",
              "type": 28
            },
            "glowThreshold": {
              "value": [
                0.1
              ],
              "editor": {
                "tooltip": "发光阈值（只有超过这个透明度的点才会发光）",
                "range": [
                  0,
                  1
                ]
              },
              "type": 13
            }
          }
        }
      ]
    }
  ],
  "shaders": [
    {
      "blocks": [
        {
          "name": "ALPHA_TEST_DATA",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "stageFlags": 16,
          "binding": 0
        },
        {
          "name": "glow",
          "members": [
            {
              "name": "hitwhit",
              "type": 13,
              "count": 1
            },
            {
              "name": "glowThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "SHOW_INNER_GLOW"
          ],
          "stageFlags": 16,
          "binding": 1
        }
      ],
      "samplerTextures": [
        {
          "name": "noiceTx",
          "type": 28,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "sampleType": 0,
          "binding": 2
        }
      ],
      "samplers": [],
      "textures": [],
      "buffers": [],
      "images": [],
      "subpassInputs": [],
      "attributes": [
        {
          "name": "a_position",
          "defines": [],
          "format": 32,
          "location": 0
        },
        {
          "name": "a_texCoord",
          "defines": [],
          "format": 21,
          "location": 1
        },
        {
          "name": "a_color",
          "defines": [],
          "format": 44,
          "location": 2
        },
        {
          "name": "a_uv0",
          "defines": [
            "USE_TEXTURE"
          ],
          "format": 21,
          "location": 3
        }
      ],
      "varyings": [
        {
          "name": "v_color",
          "type": 16,
          "count": 1,
          "defines": [],
          "stageFlags": 17,
          "location": 0
        },
        {
          "name": "v_uv0",
          "type": 14,
          "count": 1,
          "defines": [],
          "stageFlags": 17,
          "location": 1
        }
      ],
      "fragColors": [
        {
          "name": "cc_FragColor",
          "typename": "vec4",
          "type": 16,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "location": 0
        }
      ],
      "descriptors": [
        {
          "rate": 0,
          "blocks": [
            {
              "tags": {
                "builtin": "local"
              },
              "name": "CCLocal",
              "members": [
                {
                  "name": "cc_matWorld",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matWorldIT",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_lightingMapUVParam",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_localShadowBias",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_reflectionProbeData1",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_reflectionProbeData2",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_reflectionProbeBlendData1",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_reflectionProbeBlendData2",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                }
              ],
              "defines": [
                "USE_LOCAL"
              ],
              "stageFlags": 1
            }
          ],
          "samplerTextures": [
            {
              "tags": {
                "builtin": "local"
              },
              "name": "cc_spriteTexture",
              "typename": "sampler2D",
              "type": 28,
              "count": 1,
              "defines": [
                "USE_TEXTURE"
              ],
              "stageFlags": 16,
              "sampleType": 0
            }
          ],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": []
        },
        {
          "rate": 1,
          "blocks": [
            {
              "name": "ALPHA_TEST_DATA",
              "members": [
                {
                  "name": "alphaThreshold",
                  "type": 13,
                  "count": 1
                }
              ],
              "defines": [
                "USE_ALPHA_TEST"
              ],
              "stageFlags": 16,
              "binding": 0
            },
            {
              "name": "glow",
              "members": [
                {
                  "name": "hitwhit",
                  "type": 13,
                  "count": 1
                },
                {
                  "name": "glowThreshold",
                  "type": 13,
                  "count": 1
                }
              ],
              "defines": [
                "SHOW_INNER_GLOW"
              ],
              "stageFlags": 16,
              "binding": 1
            }
          ],
          "samplerTextures": [
            {
              "name": "noiceTx",
              "type": 28,
              "count": 1,
              "defines": [],
              "stageFlags": 16,
              "sampleType": 0,
              "binding": 2
            }
          ],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": []
        },
        {
          "rate": 2,
          "blocks": [],
          "samplerTextures": [],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": []
        },
        {
          "rate": 3,
          "blocks": [
            {
              "tags": {
                "builtin": "global"
              },
              "name": "CCGlobal",
              "members": [
                {
                  "name": "cc_time",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_screenSize",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_nativeSize",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_probeInfo",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_debug_view_mode",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                }
              ],
              "defines": [],
              "stageFlags": 1
            },
            {
              "tags": {
                "builtin": "global"
              },
              "name": "CCCamera",
              "members": [
                {
                  "name": "cc_matView",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matViewInv",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matProj",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matProjInv",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matViewProj",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matViewProjInv",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_cameraPos",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_surfaceTransform",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_screenScale",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_exposure",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_mainLitDir",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_mainLitColor",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_ambientSky",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_ambientGround",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_fogColor",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_fogBase",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_fogAdd",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_nearFar",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_viewPort",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                }
              ],
              "defines": [],
              "stageFlags": 1
            }
          ],
          "samplerTextures": [],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": []
        }
      ],
      "hash": 2345116460,
      "glsl4": {
        "vert": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 v_color;\nlayout(location = 1) out vec2 v_uv0;\n#if USE_TEXTURE\n  layout(location = 3) in vec2 a_uv0;\n#endif\nvec4 vert (){\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_uv0 = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nlayout(location = 0) in vec4 v_color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 v_uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#endif\nlayout(set = 1, binding = 2) uniform sampler2D noiceTx;\n#if SHOW_INNER_GLOW\n  layout(set = 1, binding = 1) uniform glow {\n    float hitwhit;\n    float glowThreshold;\n  };\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 white = vec4(1 , 1 ,1, 1);\n  vec4 burnColor = vec4(0, 0, 0.8, 1);\n  float vcolorA = v_color.a;\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  #if SHOW_INNER_GLOW\n    vec4 color_dest = o;\n    if(hitwhit > 0.){\n      if(color_dest.a > 0.02 ){\n        o = white * hitwhit + color_dest;\n      }else{\n        o = color_dest;\n      }\n    }\n    vec4 innerLightParam = vec4(1,1,1,1);\n    innerLightParam.r = o.a;\n    innerLightParam.g = 1. - abs(v_uv0.x - 0.5) * 0.5 ;\n    innerLightParam.b = 1. - abs(v_uv0.y - 0.5) * 0.5 ;\n    innerLightParam.a = innerLightParam.g * innerLightParam.b * 0.8;\n    if(innerLightParam.r < 0.08){\n        innerLightParam.a = 0.;\n    }\n    vec4 color_src = burnColor * innerLightParam.a;\n    if(v_color.r < 0.1){\n      o = color_src * color_src.a + color_dest;\n    }\n  #endif\n   vec3 result = mix(white.rgb, o.rgb,vcolorA);\n  o = vec4(result.rgb, o.a);\n  if(v_color.g != 1.){\n    float disFactor = 1.0;\n    disFactor *= step(o.b,v_color.g) * step(o.r, v_color.g) * step(o.g,v_color.g);\n    if(disFactor == 1.){\n      discard;\n    }\n    disFactor = 1.0;\n    disFactor *= step(v_color.g,0.2) * step(o.b,v_color.g+0.2);\n    o.rgb = mix(o.rgb, vec3(.2,.6,.2), disFactor);\n  }\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 v_color;\nout vec2 v_uv0;\n#if USE_TEXTURE\n  in vec2 a_uv0;\n#endif\nvec4 vert (){\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_uv0 = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nuniform sampler2D noiceTx;\n#if SHOW_INNER_GLOW\n  layout(std140) uniform glow {\n    float hitwhit;\n    float glowThreshold;\n  };\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 white = vec4(1 , 1 ,1, 1);\n  vec4 burnColor = vec4(0, 0, 0.8, 1);\n  float vcolorA = v_color.a;\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  #if SHOW_INNER_GLOW\n    vec4 color_dest = o;\n    if(hitwhit > 0.){\n      if(color_dest.a > 0.02 ){\n        o = white * hitwhit + color_dest;\n      }else{\n        o = color_dest;\n      }\n    }\n    vec4 innerLightParam = vec4(1,1,1,1);\n    innerLightParam.r = o.a;\n    innerLightParam.g = 1. - abs(v_uv0.x - 0.5) * 0.5 ;\n    innerLightParam.b = 1. - abs(v_uv0.y - 0.5) * 0.5 ;\n    innerLightParam.a = innerLightParam.g * innerLightParam.b * 0.8;\n    if(innerLightParam.r < 0.08){\n        innerLightParam.a = 0.;\n    }\n    vec4 color_src = burnColor * innerLightParam.a;\n    if(v_color.r < 0.1){\n      o = color_src * color_src.a + color_dest;\n    }\n  #endif\n   vec3 result = mix(white.rgb, o.rgb,vcolorA);\n  o = vec4(result.rgb, o.a);\n  if(v_color.g != 1.){\n    float disFactor = 1.0;\n    disFactor *= step(o.b,v_color.g) * step(o.r, v_color.g) * step(o.g,v_color.g);\n    if(disFactor == 1.){\n      discard;\n    }\n    disFactor = 1.0;\n    disFactor *= step(v_color.g,0.2) * step(o.b,v_color.g+0.2);\n    o.rgb = mix(o.rgb, vec3(.2,.6,.2), disFactor);\n  }\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n#endif\nvec4 vert (){\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  v_uv0 = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nuniform sampler2D noiceTx;\n#if SHOW_INNER_GLOW\n       uniform float hitwhit;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 white = vec4(1 , 1 ,1, 1);\n  vec4 burnColor = vec4(0, 0, 0.8, 1);\n  float vcolorA = v_color.a;\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(cc_spriteTexture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  #if SHOW_INNER_GLOW\n    vec4 color_dest = o;\n    if(hitwhit > 0.){\n      if(color_dest.a > 0.02 ){\n        o = white * hitwhit + color_dest;\n      }else{\n        o = color_dest;\n      }\n    }\n    vec4 innerLightParam = vec4(1,1,1,1);\n    innerLightParam.r = o.a;\n    innerLightParam.g = 1. - abs(v_uv0.x - 0.5) * 0.5 ;\n    innerLightParam.b = 1. - abs(v_uv0.y - 0.5) * 0.5 ;\n    innerLightParam.a = innerLightParam.g * innerLightParam.b * 0.8;\n    if(innerLightParam.r < 0.08){\n        innerLightParam.a = 0.;\n    }\n    vec4 color_src = burnColor * innerLightParam.a;\n    if(v_color.r < 0.1){\n      o = color_src * color_src.a + color_dest;\n    }\n  #endif\n   vec3 result = mix(white.rgb, o.rgb,vcolorA);\n  o = vec4(result.rgb, o.a);\n  if(v_color.g != 1.){\n    float disFactor = 1.0;\n    disFactor *= step(o.b,v_color.g) * step(o.r, v_color.g) * step(o.g,v_color.g);\n    if(disFactor == 1.){\n      discard;\n    }\n    disFactor = 1.0;\n    disFactor *= step(v_color.g,0.2) * step(o.b,v_color.g+0.2);\n    o.rgb = mix(o.rgb, vec3(.2,.6,.2), disFactor);\n  }\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            },
            {
              "name": "CCCamera",
              "defines": []
            }
          ],
          "samplerTextures": [],
          "buffers": [],
          "images": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": [
                "USE_LOCAL"
              ]
            }
          ],
          "samplerTextures": [
            {
              "name": "cc_spriteTexture",
              "defines": [
                "USE_TEXTURE"
              ]
            }
          ],
          "buffers": [],
          "images": []
        },
        "statistics": {
          "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 56,
          "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 3
        }
      },
      "defines": [
        {
          "name": "USE_LOCAL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_PIXEL_ALIGNMENT",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_EMBEDDED_ALPHA",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "SHOW_INNER_GLOW",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "IS_GRAY",
          "type": "boolean",
          "defines": [
            "USE_TEXTURE"
          ]
        },
        {
          "name": "CC_USE_ALPHA_ATLAS_TEXTURE",
          "type": "boolean",
          "defines": [
            "USE_TEXTURE"
          ]
        }
      ],
      "name": "../Res/Shade/Effect/monsterEff|sprite-vs:vert|sprite-fs:frag"
    }
  ],
  "combinations": [],
  "hideInEditor": false
}